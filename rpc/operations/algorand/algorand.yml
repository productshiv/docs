components:
  parameters:
    account-id:
      description: account string
      in: path
      name: account-id
      required: true
      schema:
        type: string
        x-go-name: AccountID
      x-go-name: AccountID
    address:
      description: Only include transactions with this address in one of the transaction fields.
      in: query
      name: address
      schema:
        type: string
    address-role:
      description: Combine with the address parameter to define what type of address to search for.
      in: query
      name: address-role
      schema:
        enum:
          - sender
          - receiver
          - freeze-target
        type: string
    after-time:
      description: Include results after the given time. Must be an RFC 3339 formatted string.
      in: query
      name: after-time
      schema:
        format: date-time
        type: string
        x-algorand-format: RFC3339 String
      x-algorand-format: RFC3339 String
    asset-id:
      description: Asset ID
      in: query
      name: asset-id
      schema:
        type: integer
        x-go-name: AssetID
      x-go-name: AssetID
    before-time:
      description: Include results before the given time. Must be an RFC 3339 formatted string.
      in: query
      name: before-time
      schema:
        format: date-time
        type: string
        x-algorand-format: RFC3339 String
      x-algorand-format: RFC3339 String
    catchpoint:
      description: A catch point
      in: path
      name: catchpoint
      required: true
      schema:
        format: catchpoint
        pattern: '[0-9]{1,10}#[A-Z0-9]{1,53}'
        type: string
        x-algorand-format: Catchpoint String
      x-algorand-format: Catchpoint String
    currency-greater-than:
      description: Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
      in: query
      name: currency-greater-than
      schema:
        type: integer
    currency-less-than:
      description: Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
      in: query
      name: currency-less-than
      schema:
        type: integer
    exclude-close-to:
      description: Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true.
      in: query
      name: exclude-close-to
      schema:
        type: boolean
    format:
      description: Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.
      in: query
      name: format
      schema:
        enum:
          - json
          - msgpack
        type: string
    limit:
      description: Maximum number of results to return.
      in: query
      name: limit
      schema:
        type: integer
    max:
      description: Truncated number of transactions to display. If max=0, returns all pending txns.
      in: query
      name: max
      schema:
        type: integer
    max-round:
      description: Include results at or before the specified max-round.
      in: query
      name: max-round
      schema:
        type: integer
    min-round:
      description: Include results at or after the specified min-round.
      in: query
      name: min-round
      schema:
        type: integer
    next:
      description: The next page of results. Use the next token provided by the previous results.
      in: query
      name: next
      schema:
        type: string
    note-prefix:
      description: Specifies a prefix which must be contained in the note field.
      in: query
      name: note-prefix
      schema:
        type: string
        x-algorand-format: base64
      x-algorand-format: base64
    round:
      description: Include results for the specified round.
      in: query
      name: round
      schema:
        type: integer
    round-number:
      description: Round number
      in: path
      name: round-number
      required: true
      schema:
        type: integer
    sig-type:
      description: |-
        SigType filters just results using the specified type of signature:
        * sig - Standard
        * msig - MultiSig
        * lsig - LogicSig
      in: query
      name: sig-type
      schema:
        enum:
          - sig
          - msig
          - lsig
        type: string
    tx-id:
      description: Lookup the specific transaction by ID.
      in: query
      name: tx-id
      schema:
        type: string
        x-algorand-format: Address
        x-go-name: TxID
      x-algorand-format: Address
      x-go-name: TxID
    tx-type:
      in: query
      name: tx-type
      schema:
        enum:
          - pay
          - keyreg
          - acfg
          - axfer
          - afrz
          - appl
          - stpf
        type: string
  responses:
    AccountApplicationResponse:
      content:
        application/json:
          schema:
            properties:
              app-local-state:
                $ref: '#/components/schemas/ApplicationLocalState'
              created-app:
                $ref: '#/components/schemas/ApplicationParams'
              round:
                description: The round for which this information is relevant.
                type: integer
            required:
              - round
            type: object
      description: AccountApplicationResponse describes the account's application local state and global state (AppLocalState and AppParams, if either exists) for a specific application ID. Global state will only be returned if the provided address is the application's creator.
    AccountAssetResponse:
      content:
        application/json:
          schema:
            properties:
              asset-holding:
                $ref: '#/components/schemas/AssetHolding'
              created-asset:
                $ref: '#/components/schemas/AssetParams'
              round:
                description: The round for which this information is relevant.
                type: integer
            required:
              - round
            type: object
      description: AccountAssetResponse describes the account's asset holding and asset parameters (if either exist) for a specific asset ID. Asset parameters will only be returned if the provided address is the asset's creator.
    AccountResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Account'
      description: AccountResponse wraps the Account type in a response.
    ApplicationResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Application'
      description: Application information
    AssetResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Asset'
      description: Asset information
    BlockHashResponse:
      content:
        application/json:
          schema:
            properties:
              blockHash:
                description: Block header hash.
                type: string
            required:
              - blockHash
            type: object
      description: Hash of a block header.
    BlockResponse:
      content:
        application/json:
          schema:
            properties:
              block:
                description: Block header data.
                properties: {}
                type: object
                x-algorand-format: BlockHeader
              cert:
                description: Optional certificate object. This is only included when the format is set to message pack.
                properties: {}
                type: object
                x-algorand-format: BlockCertificate
            required:
              - block
            type: object
      description: Encoded block object.
    BoxResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Box'
      description: Box information
    BoxesResponse:
      content:
        application/json:
          schema:
            properties:
              boxes:
                items:
                  $ref: '#/components/schemas/BoxDescriptor'
                type: array
            required:
              - boxes
            type: object
      description: Box names of an application
    CatchpointAbortResponse:
      description: An catchpoint abort response.
      content:
        application/json:
          schema:
            properties:
              catchup-message:
                description: Catchup abort response string
                type: string
            required:
              - catchup-message
            type: object
    CatchpointStartResponse:
      description: An catchpoint start response.
      content:
        application/json:
          schema:
            properties:
              catchup-message:
                description: Catchup start response string
                type: string
            required:
              - catchup-message
            type: object
    CompileResponse:
      content:
        application/json:
          schema:
            properties:
              hash:
                description: base32 SHA512_256 of program bytes (Address style)
                type: string
              result:
                description: base64 encoded program bytes
                type: string
              sourcemap:
                description: JSON of the source map
                properties: {}
                type: object
            required:
              - hash
              - result
            type: object
      description: Teal compile Result
    DisassembleResponse:
      content:
        application/json:
          schema:
            properties:
              result:
                description: disassembled Teal code
                type: string
            required:
              - result
            type: object
      description: Teal disassembly Result
    DryrunResponse:
      content:
        application/json:
          schema:
            properties:
              error:
                type: string
              protocol-version:
                description: Protocol version is the protocol version Dryrun was operated under.
                type: string
              txns:
                items:
                  $ref: '#/components/schemas/DryrunTxnResult'
                type: array
            required:
              - error
              - protocol-version
              - txns
            type: object
      description: DryrunResponse contains per-txn debug information from a dryrun.
    GetBlockTimeStampOffsetResponse:
      content:
        application/json:
          schema:
            properties:
              offset:
                description: Timestamp offset in seconds.
                type: integer
            required:
              - offset
            type: object
      description: Response containing the timestamp offset in seconds
    GetSyncRoundResponse:
      content:
        application/json:
          schema:
            properties:
              round:
                description: The minimum sync round for the ledger.
                type: integer
            required:
              - round
            type: object
      description: Response containing the ledger's minimum sync round
    LedgerStateDeltaForTransactionGroupResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LedgerStateDelta'
      description: Response containing a ledger state delta for a single transaction group.
    LedgerStateDeltaResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LedgerStateDelta'
      description: Contains ledger deltas
    LightBlockHeaderProofResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LightBlockHeaderProof'
      description: Proof of a light block header.
    NodeStatusResponse:
      description: NodeStatus contains the information about a node status
      content:
        application/json:
          schema:
            properties:
              catchpoint:
                description: The current catchpoint that is being caught up to
                type: string
              catchpoint-acquired-blocks:
                description: The number of blocks that have already been obtained by the node as part of the catchup
                type: integer
              catchpoint-processed-accounts:
                description: The number of accounts from the current catchpoint that have been processed so far as part of the catchup
                type: integer
              catchpoint-processed-kvs:
                description: The number of key-values (KVs) from the current catchpoint that have been processed so far as part of the catchup
                type: integer
              catchpoint-total-accounts:
                description: The total number of accounts included in the current catchpoint
                type: integer
              catchpoint-total-blocks:
                description: The total number of blocks that are required to complete the current catchpoint catchup
                type: integer
              catchpoint-total-kvs:
                description: The total number of key-values (KVs) included in the current catchpoint
                type: integer
              catchpoint-verified-accounts:
                description: The number of accounts from the current catchpoint that have been verified so far as part of the catchup
                type: integer
              catchpoint-verified-kvs:
                description: The number of key-values (KVs) from the current catchpoint that have been verified so far as part of the catchup
                type: integer
              catchup-time:
                description: CatchupTime in nanoseconds
                type: integer
              last-catchpoint:
                description: The last catchpoint seen by the node
                type: string
              last-round:
                description: LastRound indicates the last round seen
                type: integer
              last-version:
                description: LastVersion indicates the last consensus version supported
                type: string
              next-version:
                description: NextVersion of consensus protocol to use
                type: string
              next-version-round:
                description: NextVersionRound is the round at which the next consensus version will apply
                type: integer
              next-version-supported:
                description: NextVersionSupported indicates whether the next consensus version is supported by this node
                type: boolean
              stopped-at-unsupported-round:
                description: StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress
                type: boolean
              time-since-last-round:
                description: TimeSinceLastRound in nanoseconds
                type: integer
              upgrade-delay:
                description: Upgrade delay
                type: integer
              upgrade-next-protocol-vote-before:
                description: Next protocol round
                type: integer
              upgrade-no-votes:
                description: No votes cast for consensus upgrade
                type: integer
              upgrade-node-vote:
                description: This node's upgrade vote
                type: boolean
              upgrade-vote-rounds:
                description: Total voting rounds for current upgrade
                type: integer
              upgrade-votes:
                description: Total votes cast for consensus upgrade
                type: integer
              upgrade-votes-required:
                description: Yes votes required for consensus upgrade
                type: integer
              upgrade-yes-votes:
                description: Yes votes cast for consensus upgrade
                type: integer
            required:
              - catchup-time
              - last-round
              - last-version
              - next-version
              - next-version-round
              - next-version-supported
              - stopped-at-unsupported-round
              - time-since-last-round
            type: object
    ParticipationKeyResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ParticipationKey'
      description: A detailed description of a participation ID
    ParticipationKeysResponse:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/ParticipationKey'
            type: array
      description: A list of participation keys
    PendingTransactionsResponse:
      content:
        application/json:
          schema:
            description: PendingTransactions is an array of signed transactions exactly as they were submitted.
            properties:
              top-transactions:
                description: An array of signed transaction objects.
                items:
                  properties: {}
                  type: object
                  x-algorand-format: SignedTransaction
                type: array
              total-transactions:
                description: Total number of transactions in the pool.
                type: integer
            required:
              - top-transactions
              - total-transactions
            type: object
      description: A potentially truncated list of transactions currently in the node's transaction pool. You can compute whether or not the list is truncated if the number of elements in the **top-transactions** array is fewer than **total-transactions**.
    PostParticipationResponse:
      content:
        application/json:
          schema:
            properties:
              partId:
                description: encoding of the participation ID.
                type: string
            required:
              - partId
            type: object
      description: Participation ID of the submission
    PostTransactionsResponse:
      content:
        application/json:
          schema:
            properties:
              txId:
                description: encoding of the transaction hash.
                type: string
            required:
              - txId
            type: object
      description: Transaction ID of the submission.
    SimulateResponse:
      content:
        application/json:
          schema:
            properties:
              eval-overrides:
                $ref: '#/components/schemas/SimulationEvalOverrides'
              last-round:
                description: The round immediately preceding this simulation. State changes through this round were used to run this simulation.
                type: integer
              txn-groups:
                description: A result object for each transaction group that was simulated.
                items:
                  $ref: '#/components/schemas/SimulateTransactionGroupResult'
                type: array
              version:
                description: The version of this response object.
                type: integer
            required:
              - last-round
              - txn-groups
              - version
            type: object
      description: Result of a transaction group simulation.
    StateProofResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StateProof'
      description: StateProofResponse wraps the StateProof type in a response.
    SupplyResponse:
      content:
        application/json:
          schema:
            description: Supply represents the current supply of MicroAlgos in the system
            properties:
              current_round:
                description: Round
                type: integer
              online-money:
                description: OnlineMoney
                type: integer
              total-money:
                description: TotalMoney
                type: integer
            required:
              - current_round
              - online-money
              - total-money
            type: object
      description: Supply represents the current supply of MicroAlgos in the system.
    TransactionGroupLedgerStateDeltasForRoundResponse:
      content:
        application/json:
          schema:
            properties:
              Deltas:
                items:
                  $ref: '#/components/schemas/LedgerStateDeltaForTransactionGroup'
                type: array
            required:
              - Deltas
            type: object
      description: Response containing all ledger state deltas for transaction groups, with their associated Ids, in a single round.
    TransactionParametersResponse:
      content:
        application/json:
          schema:
            description: |-
              TransactionParams contains the parameters that help a client construct
              a new transaction.
            properties:
              consensus-version:
                description: |-
                  ConsensusVersion indicates the consensus protocol version
                  as of LastRound.
                type: string
              fee:
                description: |-
                  Fee is the suggested transaction fee
                  Fee is in units of micro-Algos per byte.
                  Fee may fall to zero but transactions must still have a fee of
                  at least MinTxnFee for the current network protocol.
                type: integer
              genesis-hash:
                description: GenesisHash is the hash of the genesis block.
                format: byte
                pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                type: string
              genesis-id:
                description: GenesisID is an ID listed in the genesis block.
                type: string
              last-round:
                description: LastRound indicates the last round seen
                type: integer
              min-fee:
                description: |-
                  The minimum transaction fee (not per byte) required for the
                  txn to validate for the current network protocol.
                type: integer
            required:
              - consensus-version
              - fee
              - genesis-hash
              - genesis-id
              - last-round
              - min-fee
            type: object
      description: TransactionParams contains the parameters that help a client construct a new transaction.
    TransactionProofResponse:
      content:
        application/json:
          schema:
            properties:
              hashtype:
                description: |-
                  The type of hash function used to create the proof, must be one of: 
                  * sha512_256 
                  * sha256
                enum:
                  - sha512_256
                  - sha256
                type: string
              idx:
                description: Index of the transaction in the block's payset.
                type: integer
              proof:
                description: Proof of transaction membership.
                format: byte
                pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                type: string
              stibhash:
                description: Hash of SignedTxnInBlock for verifying proof.
                format: byte
                pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                type: string
              treedepth:
                description: Represents the depth of the tree that is being proven, i.e. the number of edges from a leaf to the root.
                type: integer
            required:
              - hashtype
              - idx
              - proof
              - stibhash
              - treedepth
            type: object
      description: Proof of transaction in a block.
  schemas:
    Account:
      description: |
        Account information at a given round.

        Definition:
        data/basics/userBalance.go : AccountData
      properties:
        address:
          description: the account public key
          type: string
        amount:
          description: \[algo\] total number of MicroAlgos in the account
          type: integer
        amount-without-pending-rewards:
          description: specifies the amount of MicroAlgos in the account, without the pending rewards.
          type: integer
        apps-local-state:
          description: |-
            \[appl\] applications local data stored in this account.

            Note the raw object uses `map[int] -> AppLocalState` for this type.
          items:
            $ref: '#/components/schemas/ApplicationLocalState'
          type: array
        apps-total-extra-pages:
          description: \[teap\] the sum of all extra application program pages for this account.
          type: integer
        apps-total-schema:
          $ref: '#/components/schemas/ApplicationStateSchema'
        assets:
          description: |-
            \[asset\] assets held by this account.

            Note the raw object uses `map[int] -> AssetHolding` for this type.
          items:
            $ref: '#/components/schemas/AssetHolding'
          type: array
        auth-addr:
          description: \[spend\] the address against which signing should be checked. If empty, the address of the current account is used. This field can be updated in any transaction by setting the RekeyTo field.
          type: string
          x-algorand-format: Address
        created-apps:
          description: |-
            \[appp\] parameters of applications created by this account including app global data.

            Note: the raw account uses `map[int] -> AppParams` for this type.
          items:
            $ref: '#/components/schemas/Application'
          type: array
        created-assets:
          description: |-
            \[apar\] parameters of assets created by this account.

            Note: the raw account uses `map[int] -> Asset` for this type.
          items:
            $ref: '#/components/schemas/Asset'
          type: array
        min-balance:
          description: |-
            MicroAlgo balance required by the account.

            The requirement grows based on asset and application usage.
          type: integer
        participation:
          $ref: '#/components/schemas/AccountParticipation'
        pending-rewards:
          description: amount of MicroAlgos of pending rewards in this account.
          type: integer
        reward-base:
          description: \[ebase\] used as part of the rewards computation. Only applicable to accounts which are participating.
          type: integer
        rewards:
          description: \[ern\] total rewards of MicroAlgos the account has received, including pending rewards.
          type: integer
        round:
          description: The round for which this information is relevant.
          type: integer
        sig-type:
          description: |-
            Indicates what type of signature is used by this account, must be one of:
            * sig
            * msig
            * lsig
          enum:
            - sig
            - msig
            - lsig
          type: string
        status:
          description: |-
            \[onl\] delegation status of the account's MicroAlgos
            * Offline - indicates that the associated account is delegated.
            *  Online  - indicates that the associated account used as part of the delegation pool.
            *   NotParticipating - indicates that the associated account is neither a delegator nor a delegate.
          type: string
        total-apps-opted-in:
          description: The count of all applications that have been opted in, equivalent to the count of application local data (AppLocalState objects) stored in this account.
          type: integer
        total-assets-opted-in:
          description: The count of all assets that have been opted in, equivalent to the count of AssetHolding objects held by this account.
          type: integer
        total-box-bytes:
          description: \[tbxb\] The total number of bytes used by this account's app's box keys and values.
          type: integer
        total-boxes:
          description: \[tbx\] The number of existing boxes created by this account's app.
          type: integer
        total-created-apps:
          description: The count of all apps (AppParams objects) created by this account.
          type: integer
        total-created-assets:
          description: The count of all assets (AssetParams objects) created by this account.
          type: integer
      required:
        - address
        - amount
        - amount-without-pending-rewards
        - min-balance
        - pending-rewards
        - rewards
        - round
        - status
        - total-apps-opted-in
        - total-assets-opted-in
        - total-created-apps
        - total-created-assets
      type: object
    AccountParticipation:
      description: AccountParticipation describes the parameters used by this account in consensus protocol.
      properties:
        selection-participation-key:
          description: \[sel\] Selection public key (if any) currently registered for this round.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        state-proof-key:
          description: \[stprf\] Root of the state proof key (if any)
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        vote-first-valid:
          description: \[voteFst\] First round for which this participation is valid.
          type: integer
        vote-key-dilution:
          description: \[voteKD\] Number of subkeys in each batch of participation keys.
          type: integer
        vote-last-valid:
          description: \[voteLst\] Last round for which this participation is valid.
          type: integer
        vote-participation-key:
          description: \[vote\] root participation public key (if any) currently registered for this round.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
      required:
        - selection-participation-key
        - vote-first-valid
        - vote-key-dilution
        - vote-last-valid
        - vote-participation-key
      type: object
    AccountStateDelta:
      description: Application state delta.
      properties:
        address:
          type: string
        delta:
          $ref: '#/components/schemas/StateDelta'
      required:
        - address
        - delta
      type: object
    Application:
      description: Application index and its parameters
      properties:
        id:
          description: \[appidx\] application index.
          type: integer
        params:
          $ref: '#/components/schemas/ApplicationParams'
      required:
        - id
        - params
      type: object
    ApplicationLocalState:
      description: Stores local state associated with an application.
      properties:
        id:
          description: The application which this local state is for.
          type: integer
        key-value:
          $ref: '#/components/schemas/TealKeyValueStore'
        schema:
          $ref: '#/components/schemas/ApplicationStateSchema'
      required:
        - id
        - schema
      type: object
    ApplicationLogData:
      description: Stores the global information associated with an application.
      properties:
        logs:
          description: \[lg\] Logs for the application being executed by the transaction.
          items:
            format: byte
            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
            type: string
          type: array
        txid:
          description: Transaction ID
          type: string
      required:
        - logs
        - txid
      type: object
    ApplicationParams:
      description: Stores the global information associated with an application.
      properties:
        approval-program:
          description: \[approv\] approval program.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          x-algorand-format: TEALProgram
        clear-state-program:
          description: \[clearp\] approval program.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          x-algorand-format: TEALProgram
        creator:
          description: The address that created this application. This is the address where the parameters and global state for this application can be found.
          type: string
          x-algorand-format: Address
        extra-program-pages:
          description: \[epp\] the amount of extra program pages available to this app.
          type: integer
        global-state:
          $ref: '#/components/schemas/TealKeyValueStore'
        global-state-schema:
          $ref: '#/components/schemas/ApplicationStateSchema'
        local-state-schema:
          $ref: '#/components/schemas/ApplicationStateSchema'
      required:
        - approval-program
        - clear-state-program
        - creator
      type: object
    ApplicationStateSchema:
      description: Specifies maximums on the number of each type that may be stored.
      properties:
        num-byte-slice:
          description: \[nbs\] num of byte slices.
          type: integer
        num-uint:
          description: \[nui\] num of uints.
          type: integer
      required:
        - num-byte-slice
        - num-uint
      type: object
    Asset:
      description: Specifies both the unique identifier and the parameters for an asset
      properties:
        index:
          description: unique asset identifier
          type: integer
        params:
          $ref: '#/components/schemas/AssetParams'
      required:
        - index
        - params
      type: object
    AssetHolding:
      description: |-
        Describes an asset held by an account.

        Definition:
        data/basics/userBalance.go : AssetHolding
      properties:
        amount:
          description: \[a\] number of units held.
          type: integer
          x-algorand-format: uint64
        asset-id:
          description: Asset ID of the holding.
          type: integer
          x-go-name: AssetID
        is-frozen:
          description: \[f\] whether or not the holding is frozen.
          type: boolean
      required:
        - amount
        - asset-id
        - is-frozen
      type: object
    AssetParams:
      description: |-
        AssetParams specifies the parameters for an asset.

        \[apar\] when part of an AssetConfig transaction.

        Definition:
        data/transactions/asset.go : AssetParams
      properties:
        clawback:
          description: \[c\] Address of account used to clawback holdings of this asset.  If empty, clawback is not permitted.
          type: string
        creator:
          description: The address that created this asset. This is the address where the parameters for this asset can be found, and also the address where unwanted asset units can be sent in the worst case.
          type: string
        decimals:
          description: \[dc\] The number of digits to use after the decimal point when displaying this asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths. If 2, the base unit of the asset is in hundredths, and so on. This value must be between 0 and 19 (inclusive).
          maximum: 19
          minimum: 0
          type: integer
        default-frozen:
          description: \[df\] Whether holdings of this asset are frozen by default.
          type: boolean
        freeze:
          description: \[f\] Address of account used to freeze holdings of this asset.  If empty, freezing is not permitted.
          type: string
        manager:
          description: \[m\] Address of account used to manage the keys of this asset and to destroy it.
          type: string
        metadata-hash:
          description: \[am\] A commitment to some unspecified asset metadata. The format of this metadata is up to the application.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        name:
          description: \[an\] Name of this asset, as supplied by the creator. Included only when the asset name is composed of printable utf-8 characters.
          type: string
        name-b64:
          description: Base64 encoded name of this asset, as supplied by the creator.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        reserve:
          description: \[r\] Address of account holding reserve (non-minted) units of this asset.
          type: string
        total:
          description: \[t\] The total number of units of this asset.
          type: integer
          x-algorand-format: uint64
        unit-name:
          description: \[un\] Name of a unit of this asset, as supplied by the creator. Included only when the name of a unit of this asset is composed of printable utf-8 characters.
          type: string
        unit-name-b64:
          description: Base64 encoded name of a unit of this asset, as supplied by the creator.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        url:
          description: \[au\] URL where more information about the asset can be retrieved. Included only when the URL is composed of printable utf-8 characters.
          type: string
        url-b64:
          description: Base64 encoded URL where more information about the asset can be retrieved.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
      required:
        - creator
        - decimals
        - total
      type: object
    Block:
      description: |-
        Block information.

        Definition:
        data/bookkeeping/block.go : Block
      properties:
        genesis-hash:
          description: \[gh\] hash to which this block belongs.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        genesis-id:
          description: \[gen\] ID to which this block belongs.
          type: string
        participation-updates:
          $ref: '#/components/schemas/ParticipationUpdates'
        previous-block-hash:
          description: \[prev\] Previous block hash.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        rewards:
          $ref: '#/components/schemas/BlockRewards'
        round:
          description: \[rnd\] Current round on which this block was appended to the chain.
          type: integer
        seed:
          description: \[seed\] Sortition seed.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        state-proof-tracking:
          description: Tracks the status of state proofs.
          items:
            $ref: '#/components/schemas/StateProofTracking'
          type: array
        timestamp:
          description: \[ts\] Block creation timestamp in seconds since eposh
          type: integer
        transactions:
          description: \[txns\] list of transactions corresponding to a given round.
          items:
            $ref: '#/components/schemas/Transaction'
          type: array
        transactions-root:
          description: \[txn\] TransactionsRoot authenticates the set of transactions appearing in the block. More specifically, it's the root of a merkle tree whose leaves are the block's Txids, in lexicographic order. For the empty block, it's 0. Note that the TxnRoot does not authenticate the signatures on the transactions, only the transactions themselves. Two blocks with the same transactions but in a different order and with different signatures will have the same TxnRoot.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        transactions-root-sha256:
          description: \[txn256\] TransactionsRootSHA256 is an auxiliary TransactionRoot, built using a vector commitment instead of a merkle tree, and SHA256 hash function instead of the default SHA512_256. This commitment can be used on environments where only the SHA256 function exists.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        txn-counter:
          description: |-
            \[tc\] TxnCounter counts the number of transactions committed in the ledger, from the time at which support for this feature was introduced.

            Specifically, TxnCounter is the number of the next transaction that will be committed after this block.  It is 0 when no transactions have ever been committed (since TxnCounter started being supported).
          type: integer
        upgrade-state:
          $ref: '#/components/schemas/BlockUpgradeState'
        upgrade-vote:
          $ref: '#/components/schemas/BlockUpgradeVote'
      required:
        - genesis-hash
        - genesis-id
        - previous-block-hash
        - round
        - seed
        - timestamp
        - transactions-root
        - transactions-root-sha256
      type: object
    BlockRewards:
      description: Fields relating to rewards,
      properties:
        fee-sink:
          description: \[fees\] accepts transaction fees, it can only spend to the incentive pool.
          type: string
        rewards-calculation-round:
          description: \[rwcalr\] number of leftover MicroAlgos after the distribution of rewards-rate MicroAlgos for every reward unit in the next round.
          type: integer
        rewards-level:
          description: \[earn\] How many rewards, in MicroAlgos, have been distributed to each RewardUnit of MicroAlgos since genesis.
          type: integer
        rewards-pool:
          description: \[rwd\] accepts periodic injections from the fee-sink and continually redistributes them as rewards.
          type: string
        rewards-rate:
          description: \[rate\] Number of new MicroAlgos added to the participation stake from rewards at the next round.
          type: integer
        rewards-residue:
          description: \[frac\] Number of leftover MicroAlgos after the distribution of RewardsRate/rewardUnits MicroAlgos for every reward unit in the next round.
          type: integer
      required:
        - fee-sink
        - rewards-calculation-round
        - rewards-level
        - rewards-pool
        - rewards-rate
        - rewards-residue
      type: object
    BlockUpgradeState:
      description: Fields relating to a protocol upgrade.
      properties:
        current-protocol:
          description: \[proto\] The current protocol version.
          type: string
        next-protocol:
          description: \[nextproto\] The next proposed protocol version.
          type: string
        next-protocol-approvals:
          description: \[nextyes\] Number of blocks which approved the protocol upgrade.
          type: integer
        next-protocol-switch-on:
          description: \[nextswitch\] Round on which the protocol upgrade will take effect.
          type: integer
        next-protocol-vote-before:
          description: \[nextbefore\] Deadline round for this protocol upgrade (No votes will be consider after this round).
          type: integer
      required:
        - current-protocol
      type: object
    BlockUpgradeVote:
      description: Fields relating to voting for a protocol upgrade.
      properties:
        upgrade-approve:
          description: \[upgradeyes\] Indicates a yes vote for the current proposal.
          type: boolean
        upgrade-delay:
          description: \[upgradedelay\] Indicates the time between acceptance and execution.
          type: integer
        upgrade-propose:
          description: \[upgradeprop\] Indicates a proposed upgrade.
          type: string
      type: object
    Box:
      description: Box name and its content.
      properties:
        name:
          description: \[name\] box name, base64 encoded
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        round:
          description: The round for which this information is relevant
          type: integer
        value:
          description: \[value\] box value, base64 encoded.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
      required:
        - name
        - round
        - value
      type: object
    BoxDescriptor:
      description: Box descriptor describes a Box.
      properties:
        name:
          description: Base64 encoded box name
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
      required:
        - name
      type: object
    BuildVersion:
      properties:
        branch:
          type: string
        build_number:
          format: int64
          type: integer
        channel:
          type: string
        commit_hash:
          type: string
        major:
          format: int64
          type: integer
        minor:
          format: int64
          type: integer
      required:
        - branch
        - build_number
        - channel
        - commit_hash
        - major
        - minor
      title: BuildVersion contains the current algod build version information.
      type: object
    DryrunRequest:
      description: Request data type for dryrun endpoint. Given the Transactions and simulated ledger state upload, run TEAL scripts and return debugging information.
      properties:
        accounts:
          items:
            $ref: '#/components/schemas/Account'
          type: array
        apps:
          items:
            $ref: '#/components/schemas/Application'
          type: array
        latest-timestamp:
          description: LatestTimestamp is available to some TEAL scripts. Defaults to the latest confirmed timestamp this algod is attached to.
          format: int64
          type: integer
        protocol-version:
          description: ProtocolVersion specifies a specific version string to operate under, otherwise whatever the current protocol of the network this algod is running in.
          type: string
        round:
          description: Round is available to some TEAL scripts. Defaults to the current round on the network this algod is attached to.
          type: integer
          x-algorand-format: uint64
        sources:
          items:
            $ref: '#/components/schemas/DryrunSource'
          type: array
        txns:
          items:
            description: SignedTxn object. Must be canonically encoded.
            format: json
            type: string
            x-algorand-format: SignedTransaction
          type: array
      required:
        - accounts
        - apps
        - latest-timestamp
        - protocol-version
        - round
        - sources
        - txns
      type: object
    DryrunSource:
      description: DryrunSource is TEAL source text that gets uploaded, compiled, and inserted into transactions or application state.
      properties:
        app-index:
          type: integer
          x-algorand-format: uint64
        field-name:
          description: FieldName is what kind of sources this is. If lsig then it goes into the transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the Approval Program or Clear State Program of application[this.AppIndex].
          type: string
        source:
          type: string
        txn-index:
          type: integer
      required:
        - app-index
        - field-name
        - source
        - txn-index
      type: object
    DryrunState:
      description: Stores the TEAL eval step data
      properties:
        error:
          description: Evaluation error if any
          type: string
        line:
          description: Line number
          type: integer
        pc:
          description: Program counter
          type: integer
        scratch:
          items:
            $ref: '#/components/schemas/TealValue'
          type: array
        stack:
          items:
            $ref: '#/components/schemas/TealValue'
          type: array
      required:
        - line
        - pc
        - stack
      type: object
    DryrunTxnResult:
      description: DryrunTxnResult contains any LogicSig or ApplicationCall program debug information and state updates from a dryrun.
      properties:
        app-call-messages:
          items:
            type: string
          type: array
        app-call-trace:
          items:
            $ref: '#/components/schemas/DryrunState'
          type: array
        budget-added:
          description: Budget added during execution of app call transaction.
          type: integer
        budget-consumed:
          description: Budget consumed during execution of app call transaction.
          type: integer
        disassembly:
          description: Disassembled program line by line.
          items:
            type: string
          type: array
        global-delta:
          $ref: '#/components/schemas/StateDelta'
        local-deltas:
          items:
            $ref: '#/components/schemas/AccountStateDelta'
          type: array
        logic-sig-disassembly:
          description: Disassembled lsig program line by line.
          items:
            type: string
          type: array
        logic-sig-messages:
          items:
            type: string
          type: array
        logic-sig-trace:
          items:
            $ref: '#/components/schemas/DryrunState'
          type: array
        logs:
          items:
            format: byte
            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
            type: string
          type: array
      required:
        - disassembly
      type: object
    ErrorResponse:
      description: An error response with optional data field.
      properties:
        data:
          properties: {}
          type: object
        message:
          type: string
      required:
        - message
      type: object
    EvalDelta:
      description: Represents a TEAL value delta.
      properties:
        action:
          description: \[at\] delta action.
          type: integer
        bytes:
          description: \[bs\] bytes value.
          type: string
        uint:
          description: \[ui\] uint value.
          type: integer
          x-algorand-format: uint64
      required:
        - action
      type: object
    EvalDeltaKeyValue:
      description: Key-value pairs for StateDelta.
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/EvalDelta'
      required:
        - key
        - value
      type: object
    HashFactory:
      properties:
        hash-type:
          description: \[t\]
          type: integer
          x-algorand-format: uint16
      type: object
    IndexerStateProofMessage:
      properties:
        block-headers-commitment:
          description: \[b\]
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        first-attested-round:
          description: \[f\]
          type: integer
          x-algorand-format: uint64
        latest-attested-round:
          description: \[l\]
          type: integer
          x-algorand-format: uint64
        ln-proven-weight:
          description: \[P\]
          type: integer
          x-algorand-format: uint64
        voters-commitment:
          description: \[v\]
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
      type: object
    KvDelta:
      description: A single Delta containing the key, the previous value and the current value for a single round.
      properties:
        key:
          description: The key, base64 encoded.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        value:
          description: The new value of the KV store entry, base64 encoded.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
      type: object
    LedgerStateDelta:
      description: Ledger StateDelta object
      type: object
      x-algorand-format: StateDelta
    LedgerStateDeltaForTransactionGroup:
      description: Contains a ledger delta for a single transaction group
      properties:
        Delta:
          $ref: '#/components/schemas/LedgerStateDelta'
        Ids:
          items:
            type: string
          type: array
      required:
        - Delta
        - Ids
      type: object
    LightBlockHeaderProof:
      description: Proof of membership and position of a light block header.
      properties:
        index:
          description: The index of the light block header in the vector commitment tree
          type: integer
        proof:
          description: The encoded proof.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        treedepth:
          description: Represents the depth of the tree that is being proven, i.e. the number of edges from a leaf to the root.
          type: integer
      required:
        - index
        - proof
        - treedepth
      type: object
    MiniAssetHolding:
      description: 'A simplified version of AssetHolding '
      properties:
        address:
          type: string
        amount:
          type: integer
          x-algorand-format: uint64
        deleted:
          description: Whether or not this asset holding is currently deleted from its account.
          type: boolean
        is-frozen:
          type: boolean
        opted-in-at-round:
          description: Round during which the account opted into the asset.
          type: integer
          x-algorand-format: uint64
        opted-out-at-round:
          description: Round during which the account opted out of the asset.
          type: integer
          x-algorand-format: uint64
      required:
        - address
        - amount
        - is-frozen
      type: object
    MerkleArrayProof:
      properties:
        hash-factory:
          $ref: '#/components/schemas/HashFactory'
        path:
          description: \[pth\]
          items:
            format: byte
            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
            type: string
          type: array
        tree-depth:
          description: \[td\]
          type: integer
          x-algorand-format: uint8
      type: object
    OnCompletion:
      description: |-
        \[apan\] defines the what additional actions occur with the transaction.

        Valid types:
        * noop
        * optin
        * closeout
        * clear
        * update
        * update
        * delete
      enum:
        - noop
        - optin
        - closeout
        - clear
        - update
        - delete
      type: string
    ParticipationKey:
      description: Represents a participation key used by the node.
      properties:
        address:
          description: Address the key was generated for.
          type: string
          x-algorand-format: Address
        effective-first-valid:
          description: When registered, this is the first round it may be used.
          type: integer
          x-algorand-format: uint64
        effective-last-valid:
          description: When registered, this is the last round it may be used.
          type: integer
          x-algorand-format: uint64
        id:
          description: The key's ParticipationID.
          type: string
        key:
          $ref: '#/components/schemas/AccountParticipation'
        last-block-proposal:
          description: Round when this key was last used to propose a block.
          type: integer
        last-state-proof:
          description: Round when this key was last used to generate a state proof.
          type: integer
        last-vote:
          description: Round when this key was last used to vote.
          type: integer
      required:
        - address
        - id
        - key
      type: object
    ParticipationUpdates:
      description: Participation account data that needs to be checked/acted on by the network.
      properties:
        expired-participation-accounts:
          description: \[partupdrmv\] a list of online accounts that needs to be converted to offline since their participation key expired.
          items:
            type: string
          type: array
      type: object
    PendingTransactionResponse:
      description: Details about a pending transaction. If the transaction was recently confirmed, includes confirmation details like the round and reward details.
      properties:
        application-index:
          description: The application index if the transaction was found and it created an application.
          type: integer
        asset-closing-amount:
          description: The number of the asset's unit that were transferred to the close-to address.
          type: integer
        asset-index:
          description: The asset index if the transaction was found and it created an asset.
          type: integer
        close-rewards:
          description: Rewards in microalgos applied to the close remainder to account.
          type: integer
        closing-amount:
          description: Closing amount for the transaction.
          type: integer
        confirmed-round:
          description: The round where this transaction was confirmed, if present.
          type: integer
        global-state-delta:
          $ref: '#/components/schemas/StateDelta'
        inner-txns:
          description: Inner transactions produced by application execution.
          items:
            $ref: '#/components/schemas/PendingTransactionResponse'
          type: array
        local-state-delta:
          description: Local state key/value changes for the application being executed by this transaction.
          items:
            $ref: '#/components/schemas/AccountStateDelta'
          type: array
        logs:
          description: Logs for the application being executed by this transaction.
          items:
            format: byte
            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
            type: string
          type: array
        pool-error:
          description: |
            Indicates that the transaction was kicked out of this node's transaction pool (and specifies why that happened).  An empty string indicates the transaction wasn't kicked out of this node's txpool due to an error.
          type: string
        receiver-rewards:
          description: Rewards in microalgos applied to the receiver account.
          type: integer
        sender-rewards:
          description: Rewards in microalgos applied to the sender account.
          type: integer
        txn:
          description: The raw signed transaction.
          properties: {}
          type: object
          x-algorand-format: SignedTransaction
      required:
        - pool-error
        - txn
      type: object
    SimulateRequest:
      description: Request type for simulation endpoint.
      properties:
        allow-empty-signatures:
          description: Allow transactions without signatures to be simulated as if they had correct signatures.
          type: boolean
        allow-more-logging:
          description: Lifts limits on log opcode usage during simulation.
          type: boolean
        extra-opcode-budget:
          description: Applies extra opcode budget during simulation for each transaction group.
          type: integer
        txn-groups:
          description: The transaction groups to simulate.
          items:
            $ref: '#/components/schemas/SimulateRequestTransactionGroup'
          type: array
      required:
        - txn-groups
      type: object
    SimulateRequestTransactionGroup:
      description: A transaction group to simulate.
      properties:
        txns:
          description: An atomic transaction group.
          items:
            description: SignedTxn object. Must be canonically encoded.
            format: json
            type: string
            x-algorand-format: SignedTransaction
          type: array
      required:
        - txns
      type: object
    SimulateTransactionGroupResult:
      description: Simulation result for an atomic transaction group
      properties:
        app-budget-added:
          description: Total budget added during execution of app calls in the transaction group.
          type: integer
        app-budget-consumed:
          description: Total budget consumed during execution of app calls in the transaction group.
          type: integer
        failed-at:
          description: If present, indicates which transaction in this group caused the failure. This array represents the path to the failing transaction. Indexes are zero based, the first element indicates the top-level transaction, and successive elements indicate deeper inner transactions.
          items:
            type: integer
          type: array
        failure-message:
          description: If present, indicates that the transaction group failed and specifies why that happened
          type: string
        txn-results:
          description: Simulation result for individual transactions
          items:
            $ref: '#/components/schemas/SimulateTransactionResult'
          type: array
      required:
        - txn-results
      type: object
    SimulateTransactionResult:
      description: Simulation result for an individual transaction
      properties:
        app-budget-consumed:
          description: Budget used during execution of an app call transaction. This value includes budged used by inner app calls spawned by this transaction.
          type: integer
        logic-sig-budget-consumed:
          description: Budget used during execution of a logic sig transaction.
          type: integer
        txn-result:
          $ref: '#/components/schemas/PendingTransactionResponse'
      required:
        - txn-result
      type: object
    SimulationEvalOverrides:
      description: The set of parameters and limits override during simulation. If this set of parameters is present, then evaluation parameters may differ from standard evaluation in certain ways.
      properties:
        allow-empty-signatures:
          description: If true, transactions without signatures are allowed and simulated as if they were properly signed.
          type: boolean
        extra-opcode-budget:
          description: The extra opcode budget added to each transaction group during simulation
          type: integer
        max-log-calls:
          description: The maximum log calls one can make during simulation
          type: integer
        max-log-size:
          description: The maximum byte number to log during simulation
          type: integer
      type: object
    StateDelta:
      description: Application state delta.
      items:
        $ref: '#/components/schemas/EvalDeltaKeyValue'
      type: array
    StateProof:
      description: Represents a state proof and its corresponding message
      properties:
        Message:
          $ref: '#/components/schemas/StateProofMessage'
        StateProof:
          description: The encoded StateProof for the message.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
      required:
        - Message
        - StateProof
      type: object
    StateProofFields:
      description: |-
        \[sp\] represents a state proof.

        Definition:
        crypto/stateproof/structs.go : StateProof
      properties:
        part-proofs:
          $ref: '#/components/schemas/MerkleArrayProof'
        positions-to-reveal:
          description: \[pr\] Sequence of reveal positions.
          items:
            type: integer
            x-algorand-format: uint64
          type: array
        reveals:
          description: \[r\] Note that this is actually stored as a map[uint64] - Reveal in the actual msgp
          items:
            $ref: '#/components/schemas/StateProofReveal'
          type: array
        salt-version:
          description: \[v\] Salt version of the merkle signature.
          type: integer
        sig-commit:
          description: \[c\]
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        sig-proofs:
          $ref: '#/components/schemas/MerkleArrayProof'
        signed-weight:
          description: \[w\]
          type: integer
          x-algorand-format: uint64
      type: object
    StateProofMessage:
      description: Represents the message that the state proofs are attesting to.
      properties:
        BlockHeadersCommitment:
          description: The vector commitment root on all light block headers within a state proof interval.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        FirstAttestedRound:
          description: The first round the message attests to.
          type: integer
          x-algorand-format: uint64
        LastAttestedRound:
          description: The last round the message attests to.
          type: integer
          x-algorand-format: uint64
        LnProvenWeight:
          description: An integer value representing the natural log of the proven weight with 16 bits of precision. This value would be used to verify the next state proof.
          type: integer
          x-algorand-format: uint64
        VotersCommitment:
          description: The vector commitment root of the top N accounts to sign the next StateProof.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
      required:
        - BlockHeadersCommitment
        - FirstAttestedRound
        - LastAttestedRound
        - LnProvenWeight
        - VotersCommitment
      type: object
    StateProofParticipant:
      properties:
        verifier:
          $ref: '#/components/schemas/StateProofVerifier'
        weight:
          description: \[w\]
          type: integer
          x-algorand-format: uint64
      type: object
    StateProofSignature:
      properties:
        falcon-signature:
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        merkle-array-index:
          type: integer
          x-algorand-foramt: uint64
        proof:
          $ref: '#/components/schemas/MerkleArrayProof'
        verifying-key:
          description: \[vkey\]
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
      type: object
    StateProofSigSlot:
      properties:
        lower-sig-weight:
          description: \[l\] The total weight of signatures in the lower-numbered slots.
          type: integer
          x-algorand-format: uint64
        signature:
          $ref: '#/components/schemas/StateProofSignature'
      type: object
    StateProofTracking:
      properties:
        next-round:
          description: \[n\] Next round for which we will accept a state proof transaction.
          type: integer
        online-total-weight:
          description: \[t\] The total number of microalgos held by the online accounts during the StateProof round.
          type: integer
        type:
          description: State Proof Type. Note the raw object uses map with this as key.
          type: integer
          x-algorand-format: uint64
        voters-commitment:
          description: \[v\] Root of a vector commitment containing online accounts that will help sign the proof.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
      type: object
    StateProofVerifier:
      properties:
        commitment:
          description: \[cmt\] Represents the root of the vector commitment tree.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        key-lifetime:
          description: \[lf\] Key lifetime.
          type: integer
          x-algorand-format: uint64
      type: object
    StateProofReveal:
      properties:
        participant:
          $ref: '#/components/schemas/StateProofParticipant'
        position:
          description: The position in the signature and participants arrays corresponding to this entry.
          type: integer
          x-algorand-format: uint64
        sig-slot:
          $ref: '#/components/schemas/StateProofSigSlot'
      type: object
    StateSchema:
      description: Represents a \[apls\] local-state or \[apgs\] global-state schema. These schemas determine how much storage may be used in a local-state or global-state for an application. The more space used, the larger minimum balance must be maintained in the account holding the data.
      properties:
        num-byte-slice:
          description: Maximum number of TEAL byte slices that may be stored in the key/value store.
          type: integer
          x-algorand-format: uint64
        num-uint:
          description: Maximum number of TEAL uints that may be stored in the key/value store.
          type: integer
          x-algorand-format: uint64
      required:
        - num-byte-slice
        - num-uint
      type: object
    TealKeyValue:
      description: Represents a key-value pair in an application store.
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/TealValue'
      required:
        - key
        - value
      type: object
    TealKeyValueStore:
      description: Represents a key-value store for use in an application.
      items:
        $ref: '#/components/schemas/TealKeyValue'
      type: array
    TealValue:
      description: Represents a TEAL value.
      properties:
        bytes:
          description: \[tb\] bytes value.
          type: string
        type:
          description: \[tt\] value type. Value `1` refers to **bytes**, value `2` refers to **uint**
          type: integer
        uint:
          description: \[ui\] uint value.
          type: integer
          x-algorand-format: uint64
      required:
        - bytes
        - type
        - uint
      type: object
    Transaction:
      description: |
        Contains all fields common to all transactions and serves as an envelope to all transactions type. Represents both regular and inner transactions.

        Definition:
        data/transactions/signedtxn.go : SignedTxn
        data/transactions/transaction.go : Transaction
      properties:
        application-transaction:
          $ref: '#/components/schemas/TransactionApplication'
        asset-config-transaction:
          $ref: '#/components/schemas/TransactionAssetConfig'
        asset-freeze-transaction:
          $ref: '#/components/schemas/TransactionAssetFreeze'
        asset-transfer-transaction:
          $ref: '#/components/schemas/TransactionAssetTransfer'
        auth-addr:
          description: \[sgnr\] this is included with signed transactions when the signing address does not equal the sender. The backend can use this to ensure that auth addr is equal to the accounts auth addr.
          type: string
          x-algorand-format: Address
        close-rewards:
          description: \[rc\] rewards applied to close-remainder-to account.
          type: integer
        closing-amount:
          description: \[ca\] closing amount for transaction.
          type: integer
        confirmed-round:
          description: Round when the transaction was confirmed.
          type: integer
        created-application-index:
          description: Specifies an application index (ID) if an application was created with this transaction.
          type: integer
        created-asset-index:
          description: Specifies an asset index (ID) if an asset was created with this transaction.
          type: integer
        fee:
          description: \[fee\] Transaction fee.
          type: integer
        first-valid:
          description: \[fv\] First valid round for this transaction.
          type: integer
        genesis-hash:
          description: \[gh\] Hash of genesis block.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        genesis-id:
          description: \[gen\] genesis block ID.
          type: string
        global-state-delta:
          $ref: '#/components/schemas/StateDelta'
        group:
          description: \[grp\] Base64 encoded byte array of a sha512/256 digest. When present indicates that this transaction is part of a transaction group and the value is the sha512/256 hash of the transactions in that group.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        id:
          description: Transaction ID
          type: string
        inner-txns:
          description: Inner transactions produced by application execution.
          items:
            $ref: '#/components/schemas/Transaction'
          type: array
        intra-round-offset:
          description: Offset into the round where this transaction was confirmed.
          type: integer
        keyreg-transaction:
          $ref: '#/components/schemas/TransactionKeyreg'
        last-valid:
          description: \[lv\] Last valid round for this transaction.
          type: integer
        lease:
          description: \[lx\] Base64 encoded 32-byte array. Lease enforces mutual exclusion of transactions.  If this field is nonzero, then once the transaction is confirmed, it acquires the lease identified by the (Sender, Lease) pair of the transaction until the LastValid round passes.  While this transaction possesses the lease, no other transaction specifying this lease can be confirmed.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        local-state-delta:
          description: \[ld\] Local state key/value changes for the application being executed by this transaction.
          items:
            $ref: '#/components/schemas/AccountStateDelta'
          type: array
        logs:
          description: \[lg\] Logs for the application being executed by this transaction.
          items:
            format: byte
            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
            type: string
          type: array
        note:
          description: \[note\] Free form data.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        payment-transaction:
          $ref: '#/components/schemas/TransactionPayment'
        receiver-rewards:
          description: \[rr\] rewards applied to receiver account.
          type: integer
        rekey-to:
          description: \[rekey\] when included in a valid transaction, the accounts auth addr will be updated with this value and future signatures must be signed with the key represented by this address.
          type: string
          x-algorand-format: Address
        round-time:
          description: Time when the block this transaction is in was confirmed.
          type: integer
        sender:
          description: \[snd\] Sender's address.
          type: string
        sender-rewards:
          description: \[rs\] rewards applied to sender account.
          type: integer
        signature:
          $ref: '#/components/schemas/TransactionSignature'
        state-proof-transaction:
          $ref: '#/components/schemas/TransactionStateProof'
        tx-type:
          description: |-
            \[type\] Indicates what type of transaction this is. Different types have different fields.

            Valid types, and where their fields are stored:
            * \[pay\] payment-transaction
            * \[keyreg\] keyreg-transaction
            * \[acfg\] asset-config-transaction
            * \[axfer\] asset-transfer-transaction
            * \[afrz\] asset-freeze-transaction
            * \[appl\] application-transaction
            * \[stpf\] state-proof-transaction
          enum:
            - pay
            - keyreg
            - acfg
            - axfer
            - afrz
            - appl
            - stpf
          type: string
          x-algorand-format: tx-type-enum
      required:
        - fee
        - first-valid
        - last-valid
        - sender
        - tx-type
      type: object
    TransactionApplication:
      description: |-
        Fields for application transactions.

        Definition:
        data/transactions/application.go : ApplicationCallTxnFields
      properties:
        accounts:
          description: \[apat\] List of accounts in addition to the sender that may be accessed from the application's approval-program and clear-state-program.
          items:
            type: string
            x-algorand-format: Address
          type: array
        application-args:
          description: \[apaa\] transaction specific arguments accessed from the application's approval-program and clear-state-program.
          items:
            type: string
          type: array
        application-id:
          description: \[apid\] ID of the application being configured or empty if creating.
          type: integer
        approval-program:
          description: \[apap\] Logic executed for every application transaction, except when on-completion is set to "clear". It can read and write global state for the application, as well as account-specific local state. Approval programs may reject the transaction.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          x-algorand-format: TEALProgram
        clear-state-program:
          description: \[apsu\] Logic executed for application transactions with on-completion set to "clear". It can read and write global state for the application, as well as account-specific local state. Clear state programs cannot reject the transaction.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          x-algorand-format: TEALProgram
        extra-program-pages:
          description: \[epp\] specifies the additional app program len requested in pages.
          type: integer
        foreign-apps:
          description: \[apfa\] Lists the applications in addition to the application-id whose global states may be accessed by this application's approval-program and clear-state-program. The access is read-only.
          items:
            type: integer
          type: array
        foreign-assets:
          description: \[apas\] lists the assets whose parameters may be accessed by this application's ApprovalProgram and ClearStateProgram. The access is read-only.
          items:
            type: integer
          type: array
        global-state-schema:
          $ref: '#/components/schemas/StateSchema'
        local-state-schema:
          $ref: '#/components/schemas/StateSchema'
        on-completion:
          $ref: '#/components/schemas/OnCompletion'
      required:
        - application-id
        - on-completion
      type: object
    TransactionAssetConfig:
      description: |-
        Fields for asset allocation, re-configuration, and destruction.


        A zero value for asset-id indicates asset creation.
        A zero value for the params indicates asset destruction.

        Definition:
        data/transactions/asset.go : AssetConfigTxnFields
      properties:
        asset-id:
          description: \[xaid\] ID of the asset being configured or empty if creating.
          type: integer
        params:
          $ref: '#/components/schemas/AssetParams'
      type: object
    TransactionAssetFreeze:
      description: |-
        Fields for an asset freeze transaction.

        Definition:
        data/transactions/asset.go : AssetFreezeTxnFields
      properties:
        address:
          description: \[fadd\] Address of the account whose asset is being frozen or thawed.
          type: string
        asset-id:
          description: \[faid\] ID of the asset being frozen or thawed.
          type: integer
        new-freeze-status:
          description: \[afrz\] The new freeze status.
          type: boolean
      required:
        - address
        - asset-id
        - new-freeze-status
      type: object
    TransactionAssetTransfer:
      description: |-
        Fields for an asset transfer transaction.

        Definition:
        data/transactions/asset.go : AssetTransferTxnFields
      properties:
        amount:
          description: \[aamt\] Amount of asset to transfer. A zero amount transferred to self allocates that asset in the account's Assets map.
          type: integer
          x-algorand-format: uint64
        asset-id:
          description: \[xaid\] ID of the asset being transferred.
          type: integer
        close-amount:
          description: Number of assets transferred to the close-to account as part of the transaction.
          type: integer
          x-algorand-format: uint64
        close-to:
          description: \[aclose\] Indicates that the asset should be removed from the account's Assets map, and specifies where the remaining asset holdings should be transferred.  It's always valid to transfer remaining asset holdings to the creator account.
          type: string
        receiver:
          description: \[arcv\] Recipient address of the transfer.
          type: string
        sender:
          description: \[asnd\] The effective sender during a clawback transactions. If this is not a zero value, the real transaction sender must be the Clawback address from the AssetParams.
          type: string
      required:
        - amount
        - asset-id
        - receiver
      type: object
    TransactionKeyreg:
      description: |-
        Fields for a keyreg transaction.

        Definition:
        data/transactions/keyreg.go : KeyregTxnFields
      properties:
        non-participation:
          description: \[nonpart\] Mark the account as participating or non-participating.
          type: boolean
        selection-participation-key:
          description: \[selkey\] Public key used with the Verified Random Function (VRF) result during committee selection.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        state-proof-key:
          description: \[sprfkey\] State proof key used in key registration transactions.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        vote-first-valid:
          description: \[votefst\] First round this participation key is valid.
          type: integer
        vote-key-dilution:
          description: \[votekd\] Number of subkeys in each batch of participation keys.
          type: integer
        vote-last-valid:
          description: \[votelst\] Last round this participation key is valid.
          type: integer
        vote-participation-key:
          description: \[votekey\] Participation public key used in key registration transactions.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
      type: object
    TransactionPayment:
      description: |-
        Fields for a payment transaction.

        Definition:
        data/transactions/payment.go : PaymentTxnFields
      properties:
        amount:
          description: \[amt\] number of MicroAlgos intended to be transferred.
          type: integer
        close-amount:
          description: Number of MicroAlgos that were sent to the close-remainder-to address when closing the sender account.
          type: integer
        close-remainder-to:
          description: \[close\] when set, indicates that the sending account should be closed and all remaining funds be transferred to this address.
          type: string
        receiver:
          description: \[rcv\] receiver's address.
          type: string
      required:
        - amount
        - receiver
      type: object
    TransactionSignature:
      description: Validation signature associated with some data. Only one of the signatures should be provided.
      properties:
        logicsig:
          $ref: '#/components/schemas/TransactionSignatureLogicsig'
        multisig:
          $ref: '#/components/schemas/TransactionSignatureMultisig'
        sig:
          description: \[sig\] Standard ed25519 signature.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
      type: object
    TransactionSignatureLogicsig:
      description: |-
        \[lsig\] Programatic transaction signature.

        Definition:
        data/transactions/logicsig.go
      properties:
        args:
          description: \[arg\] Logic arguments, base64 encoded.
          items:
            type: string
          type: array
        logic:
          description: \[l\] Program signed by a signature or multi signature, or hashed to be the address of ana ccount. Base64 encoded TEAL program.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        multisig-signature:
          $ref: '#/components/schemas/TransactionSignatureMultisig'
        signature:
          description: \[sig\] ed25519 signature.
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
      required:
        - logic
      type: object
    TransactionSignatureMultisig:
      description: |-
        \[msig\] structure holding multiple subsignatures.

        Definition:
        crypto/multisig.go : MultisigSig
      properties:
        subsignature:
          description: \[subsig\] holds pairs of public key and signatures.
          items:
            $ref: '#/components/schemas/TransactionSignatureMultisigSubsignature'
          type: array
        threshold:
          description: \[thr\]
          type: integer
        version:
          description: \[v\]
          type: integer
      type: object
    TransactionSignatureMultisigSubsignature:
      properties:
        public-key:
          description: \[pk\]
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        signature:
          description: \[s\]
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
      type: object
    TransactionStateProof:
      description: |-
        Fields for a state proof transaction. 

        Definition:
        data/transactions/stateproof.go : StateProofTxnFields
      properties:
        message:
          $ref: '#/components/schemas/IndexerStateProofMessage'
        state-proof:
          $ref: '#/components/schemas/StateProofFields'
        state-proof-type:
          description: \[sptype\] Type of the state proof. Integer representing an entry defined in protocol/stateproof.go
          type: integer
          x-algorand-format: uint64
      type: object
    Version:
      description: algod version information.
      properties:
        build:
          $ref: '#/components/schemas/BuildVersion'
        genesis_hash_b64:
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        genesis_id:
          type: string
        versions:
          items:
            type: string
          type: array
      required:
        - build
        - genesis_hash_b64
        - genesis_id
        - versions
      title: Version contains the current algod version.
      type: object
info:
  title: RPC
  version: "1.0.0"
openapi: 3.1.0
paths:
  /genesis:
    get:
      description: Returns the entire genesis file in json.
      operationId: GetGenesis
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: The genesis file in json.
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
  /health:
    get:
      description: Returns OK if healthy.
      operationId: HealthCheck
      responses:
        '200':
          content: {}
          description: OK.
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
        - Algorand - Indexer
  /metrics:
    get:
      operationId: Metrics
      responses:
        '200':
          content: {}
          description: text with \#-comments and key:value lines
        '404':
          content: {}
          description: metrics were compiled out
      description: Return metrics about algod functioning.
      tags:
        - Algorand - Algod
  /ready:
    get:
      operationId: GetReady
      responses:
        '200':
          content: {}
          description: OK.
        '500':
          content: {}
          description: Internal Error
        '503':
          content: {}
          description: Node not ready yet
        default:
          content: {}
          description: Unknown Error
      description: Returns OK if healthy and fully caught up.
      tags:
        - Algorand - Algod
  /swagger.json:
    get:
      description: Returns the entire swagger spec in json.
      operationId: SwaggerJSON
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
          description: The current swagger spec
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
  /v2/accounts/{address}:
    get:
      description: Given a specific account public key, this call returns the accounts status, balance and spendable amounts
      operationId: AccountInformation
      parameters:
        - description: Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.
          in: query
          name: format
          schema:
            enum:
              - json
              - msgpack
            type: string
        - description: An account public key
          in: path
          name: address
          required: true
          schema:
            pattern: '[A-Z0-9]{58}'
            type: string
        - description: When set to `all` will exclude asset holdings, application local state, created asset parameters, any created application parameters. Defaults to `none`.
          in: query
          name: exclude
          schema:
            enum:
              - all
              - none
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/Account'
          description: AccountResponse wraps the Account type in a response.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
  /v2/accounts/{address}/applications/{application-id}:
    get:
      description: Given a specific account public key and application ID, this call returns the account's application local state and global state (AppLocalState and AppParams, if either exists). Global state will only be returned if the provided address is the application's creator.
      operationId: AccountApplicationInformation
      parameters:
        - description: Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.
          in: query
          name: format
          schema:
            enum:
              - json
              - msgpack
            type: string
        - description: An account public key
          in: path
          name: address
          required: true
          schema:
            pattern: '[A-Z0-9]{58}'
            type: string
        - description: An application identifier
          in: path
          name: application-id
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  app-local-state:
                    $ref: '#/components/schemas/ApplicationLocalState'
                  created-app:
                    $ref: '#/components/schemas/ApplicationParams'
                  round:
                    description: The round for which this information is relevant.
                    type: integer
                required:
                  - round
                type: object
            application/msgpack:
              schema:
                properties:
                  app-local-state:
                    $ref: '#/components/schemas/ApplicationLocalState'
                  created-app:
                    $ref: '#/components/schemas/ApplicationParams'
                  round:
                    description: The round for which this information is relevant.
                    type: integer
                required:
                  - round
                type: object
          description: AccountApplicationResponse describes the account's application local state and global state (AppLocalState and AppParams, if either exists) for a specific application ID. Global state will only be returned if the provided address is the application's creator.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Malformed address or application ID
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
  /v2/accounts/{address}/assets/{asset-id}:
    get:
      description: Given a specific account public key and asset ID, this call returns the account's asset holding and asset parameters (if either exist). Asset parameters will only be returned if the provided address is the asset's creator.
      operationId: AccountAssetInformation
      parameters:
        - description: Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.
          in: query
          name: format
          schema:
            enum:
              - json
              - msgpack
            type: string
        - description: An account public key
          in: path
          name: address
          required: true
          schema:
            pattern: '[A-Z0-9]{58}'
            type: string
        - description: An asset identifier
          in: path
          name: asset-id
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  asset-holding:
                    $ref: '#/components/schemas/AssetHolding'
                  created-asset:
                    $ref: '#/components/schemas/AssetParams'
                  round:
                    description: The round for which this information is relevant.
                    type: integer
                required:
                  - round
                type: object
            application/msgpack:
              schema:
                properties:
                  asset-holding:
                    $ref: '#/components/schemas/AssetHolding'
                  created-asset:
                    $ref: '#/components/schemas/AssetParams'
                  round:
                    description: The round for which this information is relevant.
                    type: integer
                required:
                  - round
                type: object
          description: AccountAssetResponse describes the account's asset holding and asset parameters (if either exist) for a specific asset ID. Asset parameters will only be returned if the provided address is the asset's creator.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Malformed address or asset ID
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
  /v2/accounts/{address}/transactions/pending:
    get:
      description: |
        Get the list of pending transactions by address, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX = 0, returns all pending transactions.
      operationId: GetPendingTransactionsByAddress
      parameters:
        - description: An account public key
          in: path
          name: address
          required: true
          schema:
            pattern: '[A-Z0-9]{58}'
            type: string
        - description: Truncated number of transactions to display. If max=0, returns all pending txns.
          in: query
          name: max
          schema:
            type: integer
        - description: Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.
          in: query
          name: format
          schema:
            enum:
              - json
              - msgpack
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: PendingTransactions is an array of signed transactions exactly as they were submitted.
                properties:
                  top-transactions:
                    description: An array of signed transaction objects.
                    items:
                      properties: {}
                      type: object
                      x-algorand-format: SignedTransaction
                    type: array
                  total-transactions:
                    description: Total number of transactions in the pool.
                    type: integer
                required:
                  - top-transactions
                  - total-transactions
                type: object
            application/msgpack:
              schema:
                description: PendingTransactions is an array of signed transactions exactly as they were submitted.
                properties:
                  top-transactions:
                    description: An array of signed transaction objects.
                    items:
                      properties: {}
                      type: object
                      x-algorand-format: SignedTransaction
                    type: array
                  total-transactions:
                    description: Total number of transactions in the pool.
                    type: integer
                required:
                  - top-transactions
                  - total-transactions
                type: object
          description: A potentially truncated list of transactions currently in the node's transaction pool. You can compute whether or not the list is truncated if the number of elements in the **top-transactions** array is fewer than **total-transactions**.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Max must be a non-negative integer
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Service Temporarily Unavailable
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
  /v2/applications/{application-id}:
    get:
      description: Given a application ID, it returns application information including creator, approval and clear programs, global and local schemas, and global state.
      operationId: GetApplicationByID
      parameters:
        - description: An application identifier
          in: path
          name: application-id
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
          description: Application information
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Application Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
        - Algorand - Indexer
  /v2/applications/{application-id}/box:
    get:
      description: Given an application ID and box name, it returns the round, box name, and value (each base64 encoded). Box names must be in the goal app call arg encoding form 'encoding:value'. For ints, use the form 'int:1234'. For raw bytes, use the form 'b64:A=='. For printable strings, use the form 'str:hello'. For addresses, use the form 'addr:XYZ...'.
      operationId: GetApplicationBoxByName
      parameters:
        - description: An application identifier
          in: path
          name: application-id
          required: true
          schema:
            type: integer
        - description: A box name, in the goal app call arg form 'encoding:value'. For ints, use the form 'int:1234'. For raw bytes, use the form 'b64:A=='. For printable strings, use the form 'str:hello'. For addresses, use the form 'addr:XYZ...'.
          in: query
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Box'
          description: Box information
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Box Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
        - Algorand - Indexer
  /v2/applications/{application-id}/boxes:
    get:
      description: Given an application ID, return all Box names. No particular ordering is guaranteed. Request fails when client or server-side configured limits prevent returning all Box names.
      operationId: GetApplicationBoxes
      parameters:
        - description: An application identifier
          in: path
          name: application-id
          required: true
          schema:
            type: integer
        - description: Max number of box names to return. If max is not set, or max == 0, returns all box-names.
          in: query
          name: max
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  boxes:
                    items:
                      $ref: '#/components/schemas/BoxDescriptor'
                    type: array
                required:
                  - boxes
                type: object
          description: Box names of an application
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
  /v2/assets/{asset-id}:
    get:
      description: Given a asset ID, it returns asset information including creator, name, total supply and special addresses.
      operationId: GetAssetByID
      parameters:
        - description: An asset identifier
          in: path
          name: asset-id
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
          description: Asset information
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Application Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
        - Algorand - Indexer
  /v2/blocks/{round}:
    get:
      operationId: GetBlock
      parameters:
        - description: Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.
          in: query
          name: format
          schema:
            enum:
              - json
              - msgpack
            type: string
        - description: The round from which to fetch block information.
          in: path
          name: round
          required: true
          schema:
            minimum: 0
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  block:
                    description: Block header data.
                    properties: {}
                    type: object
                    x-algorand-format: BlockHeader
                  cert:
                    description: Optional certificate object. This is only included when the format is set to message pack.
                    properties: {}
                    type: object
                    x-algorand-format: BlockCertificate
                required:
                  - block
                type: object
            application/msgpack:
              schema:
                properties:
                  block:
                    description: Block header data.
                    properties: {}
                    type: object
                    x-algorand-format: BlockHeader
                  cert:
                    description: Optional certificate object. This is only included when the format is set to message pack.
                    properties: {}
                    type: object
                    x-algorand-format: BlockCertificate
                required:
                  - block
                type: object
          description: Encoded block object.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request - Non integer number
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 'None existing block '
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        default:
          content: {}
          description: Unknown Error
      description: Get the block for the given round.
      tags:
        - Algorand - Algod
  /v2/blocks/{round}/hash:
    get:
      operationId: GetBlockHash
      parameters:
        - description: The round from which to fetch block hash information.
          in: path
          name: round
          required: true
          schema:
            minimum: 0
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  blockHash:
                    description: Block header hash.
                    type: string
                required:
                  - blockHash
                type: object
          description: Hash of a block header.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request - Non integer number
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 'None existing block '
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        default:
          content: {}
          description: Unknown Error
      description: Get the block hash for the block on the given round.
      tags:
        - Algorand - Algod
  /v2/blocks/{round}/lightheader/proof:
    get:
      operationId: GetLightBlockHeaderProof
      parameters:
        - description: The round to which the light block header belongs.
          in: path
          name: round
          required: true
          schema:
            minimum: 0
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LightBlockHeaderProof'
          description: Proof of a light block header.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Could not create proof since some data is missing
        '408':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: timed out on request
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Service Temporarily Unavailable
        default:
          content: {}
          description: Unknown Error
      description: Gets a proof for a given light block header inside a state proof commitment
      tags:
        - Algorand - Algod
  /v2/blocks/{round}/transactions/{txid}/proof:
    get:
      operationId: GetTransactionProof
      parameters:
        - description: The round in which the transaction appears.
          in: path
          name: round
          required: true
          schema:
            type: integer
        - description: The transaction ID for which to generate a proof.
          in: path
          name: txid
          required: true
          schema:
            pattern: '[A-Z0-9]+'
            type: string
        - description: |-
            The type of hash function used to create the proof, must be one of: 
            * sha512_256 
            * sha256
          in: query
          name: hashtype
          schema:
            enum:
              - sha512_256
              - sha256
            type: string
        - description: Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.
          in: query
          name: format
          schema:
            enum:
              - json
              - msgpack
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  hashtype:
                    description: |-
                      The type of hash function used to create the proof, must be one of: 
                      * sha512_256 
                      * sha256
                    enum:
                      - sha512_256
                      - sha256
                    type: string
                  idx:
                    description: Index of the transaction in the block's payset.
                    type: integer
                  proof:
                    description: Proof of transaction membership.
                    format: byte
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                  stibhash:
                    description: Hash of SignedTxnInBlock for verifying proof.
                    format: byte
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                  treedepth:
                    description: Represents the depth of the tree that is being proven, i.e. the number of edges from a leaf to the root.
                    type: integer
                required:
                  - hashtype
                  - idx
                  - proof
                  - stibhash
                  - treedepth
                type: object
          description: Proof of transaction in a block.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Malformed round number or transaction ID
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API token
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Non-existent block or transaction
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal error, including protocol not supporting proofs.
        default:
          content: {}
          description: Unknown error
      description: Get a proof for a transaction in a block.
      tags:
        - Algorand - Algod
  /v2/catchup/{catchpoint}:
    delete:
      description: Given a catchpoint, it aborts catching up to this catchpoint
      operationId: AbortCatchup
      parameters:
        - description: A catch point
          in: path
          name: catchpoint
          required: true
          schema:
            format: catchpoint
            pattern: '[0-9]{1,10}#[A-Z0-9]{1,53}'
            type: string
            x-algorand-format: Catchpoint String
          x-algorand-format: Catchpoint String
      responses:
        '200':
          description: An catchpoint abort response.
          content:
            application/json:
              schema:
                properties:
                  catchup-message:
                    description: Catchup abort response string
                    type: string
                required:
                  - catchup-message
                type: object
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
    post:
      description: Given a catchpoint, it starts catching up to this catchpoint
      operationId: StartCatchup
      parameters:
        - description: A catch point
          in: path
          name: catchpoint
          required: true
          schema:
            format: catchpoint
            pattern: '[0-9]{1,10}#[A-Z0-9]{1,53}'
            type: string
            x-algorand-format: Catchpoint String
          x-algorand-format: Catchpoint String
      responses:
        '200':
          description: An catchpoint start response.
          content:
            application/json:
              schema:
                properties:
                  catchup-message:
                    description: Catchup start response string
                    type: string
                required:
                  - catchup-message
                type: object
        '201':
          description: An catchpoint start response.
          content:
            application/json:
              schema:
                properties:
                  catchup-message:
                    description: Catchup start response string
                    type: string
                required:
                  - catchup-message
                type: object
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        default:
          content: {}
          description: Unknown Error
      summary: Starts a catchpoint catchup.
      tags:
        - Algorand - Algod
  /v2/deltas/txn/group/{id}:
    get:
      description: Get a ledger delta for a given transaction group.
      operationId: GetLedgerStateDeltaForTransactionGroup
      parameters:
        - description: A transaction ID, or transaction group ID
          in: path
          name: id
          required: true
          schema:
            pattern: '[A-Z0-9]+'
            type: string
        - description: Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.
          in: query
          name: format
          schema:
            enum:
              - json
              - msgpack
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LedgerStateDelta'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/LedgerStateDelta'
          description: Response containing a ledger state delta for a single transaction group.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Could not find a delta for transaction ID or group ID
        '408':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: timed out on request
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
  /v2/deltas/{round}:
    get:
      description: Get ledger deltas for a round.
      operationId: GetLedgerStateDelta
      parameters:
        - description: The round for which the deltas are desired.
          in: path
          name: round
          required: true
          schema:
            minimum: 0
            type: integer
        - description: Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.
          in: query
          name: format
          schema:
            enum:
              - json
              - msgpack
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LedgerStateDelta'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/LedgerStateDelta'
          description: Contains ledger deltas
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Could not find a delta for round
        '408':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: timed out on request
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Service Temporarily Unavailable
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
  /v2/deltas/{round}/txn/group:
    get:
      description: Get ledger deltas for transaction groups in a given round.
      operationId: GetTransactionGroupLedgerStateDeltasForRound
      parameters:
        - description: The round for which the deltas are desired.
          in: path
          name: round
          required: true
          schema:
            minimum: 0
            type: integer
        - description: Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.
          in: query
          name: format
          schema:
            enum:
              - json
              - msgpack
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  Deltas:
                    items:
                      $ref: '#/components/schemas/LedgerStateDeltaForTransactionGroup'
                    type: array
                required:
                  - Deltas
                type: object
            application/msgpack:
              schema:
                properties:
                  Deltas:
                    items:
                      $ref: '#/components/schemas/LedgerStateDeltaForTransactionGroup'
                    type: array
                required:
                  - Deltas
                type: object
          description: Response containing all ledger state deltas for transaction groups, with their associated Ids, in a single round.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Could not find deltas for round
        '408':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: timed out on request
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        '501':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Not Implemented
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
  /v2/devmode/blocks/offset:
    get:
      description: Gets the current timestamp offset.
      operationId: GetBlockTimeStampOffset
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  offset:
                    description: Timestamp offset in seconds.
                    type: integer
                required:
                  - offset
                type: object
          description: Response containing the timestamp offset in seconds
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: TimeStamp offset not set.
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
  /v2/devmode/blocks/offset/{offset}:
    post:
      description: Sets the timestamp offset (seconds) for blocks in dev mode. Providing an offset of 0 will unset this value and try to use the real clock for the timestamp.
      operationId: SetBlockTimeStampOffset
      parameters:
        - description: The timestamp offset for blocks in dev mode.
          in: path
          name: offset
          required: true
          schema:
            minimum: 0
            type: integer
      responses:
        '200':
          content: {}
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Cannot set timestamp offset to a negative integer.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
  /v2/experimental:
    get:
      description: Returns OK if experimental API is enabled.
      operationId: ExperimentalCheck
      responses:
        '200':
          content: {}
          description: Experimental API enabled
        '404':
          content: {}
          description: Experimental API not enabled
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
  /v2/ledger/supply:
    get:
      description: Get the current supply reported by the ledger.
      operationId: GetSupply
      responses:
        '200':
          content:
            application/json:
              schema:
                description: Supply represents the current supply of MicroAlgos in the system
                properties:
                  current_round:
                    description: Round
                    type: integer
                  online-money:
                    description: OnlineMoney
                    type: integer
                  total-money:
                    description: TotalMoney
                    type: integer
                required:
                  - current_round
                  - online-money
                  - total-money
                type: object
          description: Supply represents the current supply of MicroAlgos in the system.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
  /v2/ledger/sync:
    delete:
      description: Unset the ledger sync round.
      operationId: UnsetSyncRound
      responses:
        '200':
          content: {}
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Sync round not set.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Service Temporarily Unavailable
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
    get:
      description: Gets the minimum sync round for the ledger.
      operationId: GetSyncRound
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  round:
                    description: The minimum sync round for the ledger.
                    type: integer
                required:
                  - round
                type: object
          description: Response containing the ledger's minimum sync round
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Sync round not set.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Service Temporarily Unavailable
        default:
          content: {}
          description: Unknown Error
      summary: Returns the minimum sync round the ledger is keeping in cache.
      tags:
        - Algorand - Algod
  /v2/ledger/sync/{round}:
    post:
      description: Sets the minimum sync round on the ledger.
      operationId: SetSyncRound
      parameters:
        - description: The round for which the deltas are desired.
          in: path
          name: round
          required: true
          schema:
            minimum: 0
            type: integer
      responses:
        '200':
          content: {}
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Can not set sync round to an earlier round than the current round.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Service Temporarily Unavailable
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
  /v2/participation:
    get:
      description: Return a list of participation keys
      operationId: GetParticipationKeys
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ParticipationKey'
                type: array
          description: A list of participation keys
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Participation Key Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
    post:
      operationId: AddParticipationKey
      requestBody:
        content:
          application/msgpack:
            schema:
              format: binary
              type: string
        description: The participation key to add to the node
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  partId:
                    description: encoding of the participation ID.
                    type: string
                required:
                  - partId
                type: object
          description: Participation ID of the submission
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Participation Key Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Service Temporarily Unavailable
        default:
          content: {}
          description: Unknown Error
      summary: Add a participation key to the node
      tags:
        - Algorand - Algod
      x-codegen-request-body-name: participationkey
  /v2/participation/{participation-id}:
    delete:
      description: Delete a given participation key by ID
      operationId: DeleteParticipationKeyByID
      parameters:
        - in: path
          name: participation-id
          required: true
          schema:
            type: string
      responses:
        '200':
          content: {}
          description: Participation key got deleted by ID
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Participation Key Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
    get:
      description: Given a participation ID, return information about that participation key
      operationId: GetParticipationKeyByID
      parameters:
        - in: path
          name: participation-id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipationKey'
          description: A detailed description of a participation ID
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Participation Key Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        default:
          content: {}
          description: Unknown Error
      summary: Get participation key info given a participation ID
      tags:
        - Algorand - Algod
    post:
      description: Given a participation ID, append state proof keys to a particular set of participation keys
      operationId: AppendKeys
      parameters:
        - in: path
          name: participation-id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/msgpack:
            schema:
              format: binary
              type: string
        description: The state proof keys to add to an existing participation ID
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipationKey'
          description: A detailed description of a participation ID
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Participation Key Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        default:
          content: {}
          description: Unknown Error
      summary: Append state proof keys to a participation key
      tags:
        - Algorand - Algod
      x-codegen-request-body-name: keymap
  /v2/shutdown:
    post:
      description: Special management endpoint to shutdown the node. Optionally provide a timeout parameter to indicate that the node should begin shutting down after a number of seconds.
      operationId: ShutdownNode
      parameters:
        - in: query
          name: timeout
          schema:
            default: 0
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
      tags:
        - Algorand - Algod
  /v2/stateproofs/{round}:
    get:
      description: Get a state proof that covers a given round
      operationId: GetStateProof
      parameters:
        - description: The round for which a state proof is desired.
          in: path
          name: round
          required: true
          schema:
            minimum: 0
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StateProof'
          description: StateProofResponse wraps the StateProof type in a response.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Could not find a state proof that covers a given round
        '408':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: timed out on request
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Service Temporarily Unavailable
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
  /v2/status:
    get:
      description: Gets the current node status.
      operationId: GetStatus
      responses:
        '200':
          description: NodeStatus contains the information about a node status
          content:
            application/json:
              schema:
                properties:
                  catchpoint:
                    description: The current catchpoint that is being caught up to
                    type: string
                  catchpoint-acquired-blocks:
                    description: The number of blocks that have already been obtained by the node as part of the catchup
                    type: integer
                  catchpoint-processed-accounts:
                    description: The number of accounts from the current catchpoint that have been processed so far as part of the catchup
                    type: integer
                  catchpoint-processed-kvs:
                    description: The number of key-values (KVs) from the current catchpoint that have been processed so far as part of the catchup
                    type: integer
                  catchpoint-total-accounts:
                    description: The total number of accounts included in the current catchpoint
                    type: integer
                  catchpoint-total-blocks:
                    description: The total number of blocks that are required to complete the current catchpoint catchup
                    type: integer
                  catchpoint-total-kvs:
                    description: The total number of key-values (KVs) included in the current catchpoint
                    type: integer
                  catchpoint-verified-accounts:
                    description: The number of accounts from the current catchpoint that have been verified so far as part of the catchup
                    type: integer
                  catchpoint-verified-kvs:
                    description: The number of key-values (KVs) from the current catchpoint that have been verified so far as part of the catchup
                    type: integer
                  catchup-time:
                    description: CatchupTime in nanoseconds
                    type: integer
                  last-catchpoint:
                    description: The last catchpoint seen by the node
                    type: string
                  last-round:
                    description: LastRound indicates the last round seen
                    type: integer
                  last-version:
                    description: LastVersion indicates the last consensus version supported
                    type: string
                  next-version:
                    description: NextVersion of consensus protocol to use
                    type: string
                  next-version-round:
                    description: NextVersionRound is the round at which the next consensus version will apply
                    type: integer
                  next-version-supported:
                    description: NextVersionSupported indicates whether the next consensus version is supported by this node
                    type: boolean
                  stopped-at-unsupported-round:
                    description: StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress
                    type: boolean
                  time-since-last-round:
                    description: TimeSinceLastRound in nanoseconds
                    type: integer
                  upgrade-delay:
                    description: Upgrade delay
                    type: integer
                  upgrade-next-protocol-vote-before:
                    description: Next protocol round
                    type: integer
                  upgrade-no-votes:
                    description: No votes cast for consensus upgrade
                    type: integer
                  upgrade-node-vote:
                    description: This node's upgrade vote
                    type: boolean
                  upgrade-vote-rounds:
                    description: Total voting rounds for current upgrade
                    type: integer
                  upgrade-votes:
                    description: Total votes cast for consensus upgrade
                    type: integer
                  upgrade-votes-required:
                    description: Yes votes required for consensus upgrade
                    type: integer
                  upgrade-yes-votes:
                    description: Yes votes cast for consensus upgrade
                    type: integer
                required:
                  - catchup-time
                  - last-round
                  - last-version
                  - next-version
                  - next-version-round
                  - next-version-supported
                  - stopped-at-unsupported-round
                  - time-since-last-round
                type: object
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '500':
          content:
            application/json:
              schema:
                type: string
          description: Internal Error
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
  /v2/status/wait-for-block-after/{round}:
    get:
      description: Waits for a block to appear after round {round} and returns the node's status at the time.
      operationId: WaitForBlock
      parameters:
        - description: The round to wait until returning status
          in: path
          name: round
          required: true
          schema:
            minimum: 0
            type: integer
      responses:
        '200':
          description: NodeStatus contains the information about a node status
          content:
            application/json:
              schema:
                properties:
                  catchpoint:
                    description: The current catchpoint that is being caught up to
                    type: string
                  catchpoint-acquired-blocks:
                    description: The number of blocks that have already been obtained by the node as part of the catchup
                    type: integer
                  catchpoint-processed-accounts:
                    description: The number of accounts from the current catchpoint that have been processed so far as part of the catchup
                    type: integer
                  catchpoint-processed-kvs:
                    description: The number of key-values (KVs) from the current catchpoint that have been processed so far as part of the catchup
                    type: integer
                  catchpoint-total-accounts:
                    description: The total number of accounts included in the current catchpoint
                    type: integer
                  catchpoint-total-blocks:
                    description: The total number of blocks that are required to complete the current catchpoint catchup
                    type: integer
                  catchpoint-total-kvs:
                    description: The total number of key-values (KVs) included in the current catchpoint
                    type: integer
                  catchpoint-verified-accounts:
                    description: The number of accounts from the current catchpoint that have been verified so far as part of the catchup
                    type: integer
                  catchpoint-verified-kvs:
                    description: The number of key-values (KVs) from the current catchpoint that have been verified so far as part of the catchup
                    type: integer
                  catchup-time:
                    description: CatchupTime in nanoseconds
                    type: integer
                  last-catchpoint:
                    description: The last catchpoint seen by the node
                    type: string
                  last-round:
                    description: LastRound indicates the last round seen
                    type: integer
                  last-version:
                    description: LastVersion indicates the last consensus version supported
                    type: string
                  next-version:
                    description: NextVersion of consensus protocol to use
                    type: string
                  next-version-round:
                    description: NextVersionRound is the round at which the next consensus version will apply
                    type: integer
                  next-version-supported:
                    description: NextVersionSupported indicates whether the next consensus version is supported by this node
                    type: boolean
                  stopped-at-unsupported-round:
                    description: StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress
                    type: boolean
                  time-since-last-round:
                    description: TimeSinceLastRound in nanoseconds
                    type: integer
                  upgrade-delay:
                    description: Upgrade delay
                    type: integer
                  upgrade-next-protocol-vote-before:
                    description: Next protocol round
                    type: integer
                  upgrade-no-votes:
                    description: No votes cast for consensus upgrade
                    type: integer
                  upgrade-node-vote:
                    description: This node's upgrade vote
                    type: boolean
                  upgrade-vote-rounds:
                    description: Total voting rounds for current upgrade
                    type: integer
                  upgrade-votes:
                    description: Total votes cast for consensus upgrade
                    type: integer
                  upgrade-votes-required:
                    description: Yes votes required for consensus upgrade
                    type: integer
                  upgrade-yes-votes:
                    description: Yes votes cast for consensus upgrade
                    type: integer
                required:
                  - catchup-time
                  - last-round
                  - last-version
                  - next-version
                  - next-version-round
                  - next-version-supported
                  - stopped-at-unsupported-round
                  - time-since-last-round
                type: object
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 'Bad Request -- number must be non-negative integer '
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Service Temporarily Unavailable
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
  /v2/teal/compile:
    post:
      description: Given TEAL source code in plain text, return base64 encoded program bytes and base32 SHA512_256 hash of program bytes (Address style). This endpoint is only enabled when a node's configuration file sets EnableDeveloperAPI to true.
      operationId: TealCompile
      parameters:
        - description: When set to `true`, returns the source map of the program as a JSON. Defaults to `false`.
          in: query
          name: sourcemap
          schema:
            type: boolean
      requestBody:
        content:
          text/plain:
            schema:
              format: binary
              type: string
        description: TEAL source code to be compiled
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  hash:
                    description: base32 SHA512_256 of program bytes (Address style)
                    type: string
                  result:
                    description: base64 encoded program bytes
                    type: string
                  sourcemap:
                    description: JSON of the source map
                    properties: {}
                    type: object
                required:
                  - hash
                  - result
                type: object
          description: Teal compile Result
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request - Teal Compile Error
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '404':
          content: {}
          description: Developer API not enabled
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
      x-codegen-request-body-name: source
  /v2/teal/disassemble:
    post:
      description: Given the program bytes, return the TEAL source code in plain text. This endpoint is only enabled when a node's configuration file sets EnableDeveloperAPI to true.
      operationId: TealDisassemble
      requestBody:
        content:
          application/x-binary:
            schema:
              format: byte
              type: string
        description: TEAL program binary to be disassembled
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  result:
                    description: disassembled Teal code
                    type: string
                required:
                  - result
                type: object
          description: Teal disassembly Result
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request - Teal Compile Error
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '404':
          content: {}
          description: Developer API not enabled
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
      x-codegen-request-body-name: source
  /v2/teal/dryrun:
    post:
      description: Executes TEAL program(s) in context and returns debugging information about the execution. This endpoint is only enabled when a node's configuration file sets EnableDeveloperAPI to true.
      operationId: TealDryrun
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DryrunRequest'
          application/msgpack:
            schema:
              $ref: '#/components/schemas/DryrunRequest'
        description: Transaction (or group) and any accompanying state-simulation data.
        required: false
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
                  protocol-version:
                    description: Protocol version is the protocol version Dryrun was operated under.
                    type: string
                  txns:
                    items:
                      $ref: '#/components/schemas/DryrunTxnResult'
                    type: array
                required:
                  - error
                  - protocol-version
                  - txns
                type: object
          description: DryrunResponse contains per-txn debug information from a dryrun.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '404':
          content: {}
          description: Developer API not enabled
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
      x-codegen-request-body-name: request
  /v2/transactions:
    post:
      description: Broadcasts a raw transaction or transaction group to the network.
      operationId: RawTransaction
      requestBody:
        content:
          application/x-binary:
            schema:
              format: binary
              type: string
        description: The byte encoded signed transaction to broadcast to network
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  txId:
                    description: encoding of the transaction hash.
                    type: string
                required:
                  - txId
                type: object
          description: Transaction ID of the submission.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: 'Bad Request - Malformed Algorand transaction '
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Service Temporarily Unavailable
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
        - Algorand - Indexer
      x-codegen-request-body-name: rawtxn
  /v2/transactions/params:
    get:
      description: Get parameters for constructing a new transaction
      operationId: TransactionParams
      responses:
        '200':
          content:
            application/json:
              schema:
                description: |-
                  TransactionParams contains the parameters that help a client construct
                  a new transaction.
                properties:
                  consensus-version:
                    description: |-
                      ConsensusVersion indicates the consensus protocol version
                      as of LastRound.
                    type: string
                  fee:
                    description: |-
                      Fee is the suggested transaction fee
                      Fee is in units of micro-Algos per byte.
                      Fee may fall to zero but transactions must still have a fee of
                      at least MinTxnFee for the current network protocol.
                    type: integer
                  genesis-hash:
                    description: GenesisHash is the hash of the genesis block.
                    format: byte
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                  genesis-id:
                    description: GenesisID is an ID listed in the genesis block.
                    type: string
                  last-round:
                    description: LastRound indicates the last round seen
                    type: integer
                  min-fee:
                    description: |-
                      The minimum transaction fee (not per byte) required for the
                      txn to validate for the current network protocol.
                    type: integer
                required:
                  - consensus-version
                  - fee
                  - genesis-hash
                  - genesis-id
                  - last-round
                  - min-fee
                type: object
          description: TransactionParams contains the parameters that help a client construct a new transaction.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Service Temporarily Unavailable
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
  /v2/transactions/pending:
    get:
      description: |
        Get the list of pending transactions, sorted by priority, in decreasing order, truncated at the end at MAX. If MAX = 0, returns all pending transactions.
      operationId: GetPendingTransactions
      parameters:
        - description: Truncated number of transactions to display. If max=0, returns all pending txns.
          in: query
          name: max
          schema:
            type: integer
        - description: Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.
          in: query
          name: format
          schema:
            enum:
              - json
              - msgpack
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: PendingTransactions is an array of signed transactions exactly as they were submitted.
                properties:
                  top-transactions:
                    description: An array of signed transaction objects.
                    items:
                      properties: {}
                      type: object
                      x-algorand-format: SignedTransaction
                    type: array
                  total-transactions:
                    description: Total number of transactions in the pool.
                    type: integer
                required:
                  - top-transactions
                  - total-transactions
                type: object
            application/msgpack:
              schema:
                description: PendingTransactions is an array of signed transactions exactly as they were submitted.
                properties:
                  top-transactions:
                    description: An array of signed transaction objects.
                    items:
                      properties: {}
                      type: object
                      x-algorand-format: SignedTransaction
                    type: array
                  total-transactions:
                    description: Total number of transactions in the pool.
                    type: integer
                required:
                  - top-transactions
                  - total-transactions
                type: object
          description: A potentially truncated list of transactions currently in the node's transaction pool. You can compute whether or not the list is truncated if the number of elements in the **top-transactions** array is fewer than **total-transactions**.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Service Temporarily Unavailable
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
  /v2/transactions/pending/{txid}:
    get:
      description: |
        Given a transaction ID of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed:
        - transaction committed (committed round > 0)
        - transaction still in the pool (committed round = 0, pool error = "")
        - transaction removed from pool due to error (committed round = 0, pool error != "")
        Or the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error.
      operationId: PendingTransactionInformation
      parameters:
        - description: A transaction ID
          in: path
          name: txid
          required: true
          schema:
            pattern: '[A-Z0-9]+'
            type: string
        - description: Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.
          in: query
          name: format
          schema:
            enum:
              - json
              - msgpack
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PendingTransactionResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/PendingTransactionResponse'
          description: |-
            Given a transaction ID of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed:
            - transaction committed (committed round > 0)
            - transaction still in the pool (committed round = 0, pool error = "")
            - transaction removed from pool due to error (committed round = 0, pool error != "")

            Or the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Transaction Not Found
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
  /v2/transactions/simulate:
    post:
      description: Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
      operationId: SimulateTransaction
      parameters:
        - description: Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.
          in: query
          name: format
          schema:
            enum:
              - json
              - msgpack
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimulateRequest'
          application/msgpack:
            schema:
              $ref: '#/components/schemas/SimulateRequest'
        description: The transactions to simulate, along with any other inputs.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  eval-overrides:
                    $ref: '#/components/schemas/SimulationEvalOverrides'
                  last-round:
                    description: The round immediately preceding this simulation. State changes through this round were used to run this simulation.
                    type: integer
                  txn-groups:
                    description: A result object for each transaction group that was simulated.
                    items:
                      $ref: '#/components/schemas/SimulateTransactionGroupResult'
                    type: array
                  version:
                    description: The version of this response object.
                    type: integer
                required:
                  - last-round
                  - txn-groups
                  - version
                type: object
            application/msgpack:
              schema:
                properties:
                  eval-overrides:
                    $ref: '#/components/schemas/SimulationEvalOverrides'
                  last-round:
                    description: The round immediately preceding this simulation. State changes through this round were used to run this simulation.
                    type: integer
                  txn-groups:
                    description: A result object for each transaction group that was simulated.
                    items:
                      $ref: '#/components/schemas/SimulateTransactionGroupResult'
                    type: array
                  version:
                    description: The version of this response object.
                    type: integer
                required:
                  - last-round
                  - txn-groups
                  - version
                type: object
          description: Result of a transaction group simulation.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Invalid API Token
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Internal Error
        '503':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/msgpack:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Service Temporarily Unavailable
        default:
          content: {}
          description: Unknown Error
      tags:
        - Algorand - Algod
      x-codegen-request-body-name: request
  /v2/accounts:
    get:
      description: Search for accounts.
      operationId: searchForAccounts
      parameters:
        - description: Asset ID
          in: query
          name: asset-id
          schema:
            type: integer
        - description: Maximum number of results to return. There could be additional pages even if the limit is not reached.
          in: query
          name: limit
          schema:
            type: integer
        - description: The next page of results. Use the next token provided by the previous results.
          in: query
          name: next
          schema:
            type: string
        - description: Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
          in: query
          name: currency-greater-than
          schema:
            type: integer
        - description: Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
          in: query
          name: include-all
          schema:
            type: boolean
        - description: Exclude additional items such as asset holdings, application local data stored for this account, asset parameters created by this account, and application parameters created by this account.
          explode: false
          in: query
          name: exclude
          schema:
            items:
              enum:
                - all
                - assets
                - created-assets
                - apps-local-state
                - created-apps
                - none
              type: string
            type: array
          style: form
        - description: Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
          in: query
          name: currency-less-than
          schema:
            type: integer
        - description: Include accounts configured to use this spending key.
          in: query
          name: auth-addr
          schema:
            type: string
            x-algorand-format: Address
          x-algorand-format: Address
        - description: Include results for the specified round. For performance reasons, this parameter may be disabled on some configurations. Using application-id or asset-id filters will return both creator and opt-in accounts. Filtering by include-all will return creator and opt-in accounts for deleted assets and accounts. Non-opt-in managers are not included in the results when asset-id is used.
          in: query
          name: round
          schema:
            type: integer
        - description: Application ID
          in: query
          name: application-id
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  accounts:
                    items:
                      $ref: '#/components/schemas/Account'
                    type: array
                  current-round:
                    description: Round at which the results were computed.
                    type: integer
                  next-token:
                    description: Used for pagination, when making another request provide this token with the next parameter.
                    type: string
                required:
                  - accounts
                  - current-round
                type: object
          description: (empty)
        '400':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
        '500':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
      tags:
        - Algorand - Indexer
  /v2/accounts/{account-id}:
    get:
      description: Lookup account information.
      operationId: lookupAccountByID
      parameters:
        - description: account string
          in: path
          name: account-id
          required: true
          schema:
            type: string
        - description: Include results for the specified round.
          in: query
          name: round
          schema:
            type: integer
        - description: Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
          in: query
          name: include-all
          schema:
            type: boolean
        - description: Exclude additional items such as asset holdings, application local data stored for this account, asset parameters created by this account, and application parameters created by this account.
          explode: false
          in: query
          name: exclude
          schema:
            items:
              enum:
                - all
                - assets
                - created-assets
                - apps-local-state
                - created-apps
                - none
              type: string
            type: array
          style: form
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  account:
                    $ref: '#/components/schemas/Account'
                  current-round:
                    description: Round at which the results were computed.
                    type: integer
                required:
                  - account
                  - current-round
                type: object
          description: (empty)
        '400':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
        '404':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
        '500':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
      tags:
        - Algorand - Indexer
  /v2/accounts/{account-id}/apps-local-state:
    get:
      description: Lookup an account's asset holdings, optionally for a specific ID.
      operationId: lookupAccountAppLocalStates
      parameters:
        - description: account string
          in: path
          name: account-id
          required: true
          schema:
            type: string
        - description: Application ID
          in: query
          name: application-id
          schema:
            type: integer
        - description: Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
          in: query
          name: include-all
          schema:
            type: boolean
        - description: Maximum number of results to return. There could be additional pages even if the limit is not reached.
          in: query
          name: limit
          schema:
            type: integer
        - description: The next page of results. Use the next token provided by the previous results.
          in: query
          name: next
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  apps-local-states:
                    items:
                      $ref: '#/components/schemas/ApplicationLocalState'
                    type: array
                  current-round:
                    description: Round at which the results were computed.
                    type: integer
                  next-token:
                    description: Used for pagination, when making another request provide this token with the next parameter.
                    type: string
                required:
                  - apps-local-states
                  - current-round
                type: object
          description: (empty)
        '400':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
        '404':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
        '500':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
      tags:
        - Algorand - Indexer
  /v2/accounts/{account-id}/assets:
    get:
      description: Lookup an account's asset holdings, optionally for a specific ID.
      operationId: lookupAccountAssets
      parameters:
        - description: account string
          in: path
          name: account-id
          required: true
          schema:
            type: string
        - description: Asset ID
          in: query
          name: asset-id
          schema:
            type: integer
        - description: Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
          in: query
          name: include-all
          schema:
            type: boolean
        - description: Maximum number of results to return. There could be additional pages even if the limit is not reached.
          in: query
          name: limit
          schema:
            type: integer
        - description: The next page of results. Use the next token provided by the previous results.
          in: query
          name: next
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  assets:
                    items:
                      $ref: '#/components/schemas/AssetHolding'
                    type: array
                  current-round:
                    description: Round at which the results were computed.
                    type: integer
                  next-token:
                    description: Used for pagination, when making another request provide this token with the next parameter.
                    type: string
                required:
                  - assets
                  - current-round
                type: object
          description: (empty)
        '400':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
        '404':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
        '500':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
      tags:
        - Algorand - Indexer
  /v2/accounts/{account-id}/created-applications:
    get:
      description: Lookup an account's created application parameters, optionally for a specific ID.
      operationId: lookupAccountCreatedApplications
      parameters:
        - description: account string
          in: path
          name: account-id
          required: true
          schema:
            type: string
        - description: Application ID
          in: query
          name: application-id
          schema:
            type: integer
        - description: Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
          in: query
          name: include-all
          schema:
            type: boolean
        - description: Maximum number of results to return. There could be additional pages even if the limit is not reached.
          in: query
          name: limit
          schema:
            type: integer
        - description: The next page of results. Use the next token provided by the previous results.
          in: query
          name: next
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  applications:
                    items:
                      $ref: '#/components/schemas/Application'
                    type: array
                  current-round:
                    description: Round at which the results were computed.
                    type: integer
                  next-token:
                    description: Used for pagination, when making another request provide this token with the next parameter.
                    type: string
                required:
                  - applications
                  - current-round
                type: object
          description: (empty)
        '400':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
        '404':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
        '500':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
      tags:
        - Algorand - Indexer
  /v2/accounts/{account-id}/created-assets:
    get:
      description: Lookup an account's created asset parameters, optionally for a specific ID.
      operationId: lookupAccountCreatedAssets
      parameters:
        - description: account string
          in: path
          name: account-id
          required: true
          schema:
            type: string
        - description: Asset ID
          in: query
          name: asset-id
          schema:
            type: integer
        - description: Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
          in: query
          name: include-all
          schema:
            type: boolean
        - description: Maximum number of results to return. There could be additional pages even if the limit is not reached.
          in: query
          name: limit
          schema:
            type: integer
        - description: The next page of results. Use the next token provided by the previous results.
          in: query
          name: next
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  assets:
                    items:
                      $ref: '#/components/schemas/Asset'
                    type: array
                  current-round:
                    description: Round at which the results were computed.
                    type: integer
                  next-token:
                    description: Used for pagination, when making another request provide this token with the next parameter.
                    type: string
                required:
                  - assets
                  - current-round
                type: object
          description: (empty)
        '400':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
        '404':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
        '500':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
      tags:
        - Algorand - Indexer
  /v2/accounts/{account-id}/transactions:
    get:
      description: Lookup account transactions. Transactions are returned newest to oldest.
      operationId: lookupAccountTransactions
      parameters:
        - description: Maximum number of results to return. There could be additional pages even if the limit is not reached.
          in: query
          name: limit
          schema:
            type: integer
        - description: The next page of results. Use the next token provided by the previous results.
          in: query
          name: next
          schema:
            type: string
        - description: Specifies a prefix which must be contained in the note field.
          in: query
          name: note-prefix
          schema:
            type: string
            x-algorand-format: base64
          x-algorand-format: base64
        - in: query
          name: tx-type
          schema:
            enum:
              - pay
              - keyreg
              - acfg
              - axfer
              - afrz
              - appl
              - stpf
            type: string
        - description: |-
            SigType filters just results using the specified type of signature:
            * sig - Standard
            * msig - MultiSig
            * lsig - LogicSig
          in: query
          name: sig-type
          schema:
            enum:
              - sig
              - msig
              - lsig
            type: string
        - description: Lookup the specific transaction by ID.
          in: query
          name: txid
          schema:
            type: string
        - description: Include results for the specified round.
          in: query
          name: round
          schema:
            type: integer
        - description: Include results at or after the specified min-round.
          in: query
          name: min-round
          schema:
            type: integer
        - description: Include results at or before the specified max-round.
          in: query
          name: max-round
          schema:
            type: integer
        - description: Asset ID
          in: query
          name: asset-id
          schema:
            type: integer
        - description: Include results before the given time. Must be an RFC 3339 formatted string.
          in: query
          name: before-time
          schema:
            format: date-time
            type: string
            x-algorand-format: RFC3339 String
          x-algorand-format: RFC3339 String
        - description: Include results after the given time. Must be an RFC 3339 formatted string.
          in: query
          name: after-time
          schema:
            format: date-time
            type: string
            x-algorand-format: RFC3339 String
          x-algorand-format: RFC3339 String
        - description: Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
          in: query
          name: currency-greater-than
          schema:
            type: integer
        - description: Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
          in: query
          name: currency-less-than
          schema:
            type: integer
        - description: account string
          in: path
          name: account-id
          required: true
          schema:
            type: string
        - description: Include results which include the rekey-to field.
          in: query
          name: rekey-to
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  current-round:
                    description: Round at which the results were computed.
                    type: integer
                  next-token:
                    description: Used for pagination, when making another request provide this token with the next parameter.
                    type: string
                  transactions:
                    items:
                      $ref: '#/components/schemas/Transaction'
                    type: array
                required:
                  - current-round
                  - transactions
                type: object
          description: (empty)
        '400':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
        '500':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
      tags:
        - Algorand - Indexer
  /v2/applications:
    get:
      description: Search for applications
      operationId: searchForApplications
      parameters:
        - description: Application ID
          in: query
          name: application-id
          schema:
            type: integer
        - description: Filter just applications with the given creator address.
          in: query
          name: creator
          schema:
            type: string
        - description: Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
          in: query
          name: include-all
          schema:
            type: boolean
        - description: Maximum number of results to return. There could be additional pages even if the limit is not reached.
          in: query
          name: limit
          schema:
            type: integer
        - description: The next page of results. Use the next token provided by the previous results.
          in: query
          name: next
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  applications:
                    items:
                      $ref: '#/components/schemas/Application'
                    type: array
                  current-round:
                    description: Round at which the results were computed.
                    type: integer
                  next-token:
                    description: Used for pagination, when making another request provide this token with the next parameter.
                    type: string
                required:
                  - applications
                  - current-round
                type: object
          description: (empty)
        '500':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
      tags:
        - Algorand - Indexer
  /v2/applications/{application-id}/logs:
    get:
      description: Lookup application logs.
      operationId: lookupApplicationLogsByID
      parameters:
        - in: path
          name: application-id
          required: true
          schema:
            type: integer
        - description: Maximum number of results to return. There could be additional pages even if the limit is not reached.
          in: query
          name: limit
          schema:
            type: integer
        - description: The next page of results. Use the next token provided by the previous results.
          in: query
          name: next
          schema:
            type: string
        - description: Lookup the specific transaction by ID.
          in: query
          name: txid
          schema:
            type: string
        - description: Include results at or after the specified min-round.
          in: query
          name: min-round
          schema:
            type: integer
        - description: Include results at or before the specified max-round.
          in: query
          name: max-round
          schema:
            type: integer
        - description: Only include transactions with this sender address.
          in: query
          name: sender-address
          schema:
            type: string
            x-algorand-format: Address
          x-algorand-format: Address
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  application-id:
                    description: \[appidx\] application index.
                    type: integer
                  current-round:
                    description: Round at which the results were computed.
                    type: integer
                  log-data:
                    items:
                      $ref: '#/components/schemas/ApplicationLogData'
                    type: array
                  next-token:
                    description: Used for pagination, when making another request provide this token with the next parameter.
                    type: string
                required:
                  - application-id
                  - current-round
                type: object
          description: (empty)
      tags:
        - Algorand - Indexer
  /v2/assets:
    get:
      description: Search for assets.
      operationId: searchForAssets
      parameters:
        - description: Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
          in: query
          name: include-all
          schema:
            type: boolean
        - description: Maximum number of results to return. There could be additional pages even if the limit is not reached.
          in: query
          name: limit
          schema:
            type: integer
        - description: The next page of results. Use the next token provided by the previous results.
          in: query
          name: next
          schema:
            type: string
        - description: Filter just assets with the given creator address.
          in: query
          name: creator
          schema:
            type: string
        - description: Filter just assets with the given name.
          in: query
          name: name
          schema:
            type: string
        - description: Filter just assets with the given unit.
          in: query
          name: unit
          schema:
            type: string
        - description: Asset ID
          in: query
          name: asset-id
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  assets:
                    items:
                      $ref: '#/components/schemas/Asset'
                    type: array
                  current-round:
                    description: Round at which the results were computed.
                    type: integer
                  next-token:
                    description: Used for pagination, when making another request provide this token with the next parameter.
                    type: string
                required:
                  - assets
                  - current-round
                type: object
          description: (empty)
        '400':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
        '500':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
      tags:
        - Algorand - Indexer
  /v2/assets/{asset-id}/balances:
    get:
      description: 'Lookup the list of accounts who hold this asset '
      operationId: lookupAssetBalances
      parameters:
        - description: Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
          in: query
          name: include-all
          schema:
            type: boolean
        - description: Maximum number of results to return. There could be additional pages even if the limit is not reached.
          in: query
          name: limit
          schema:
            type: integer
        - description: The next page of results. Use the next token provided by the previous results.
          in: query
          name: next
          schema:
            type: string
        - description: Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
          in: query
          name: currency-greater-than
          schema:
            type: integer
        - description: Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
          in: query
          name: currency-less-than
          schema:
            type: integer
        - in: path
          name: asset-id
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  balances:
                    items:
                      $ref: '#/components/schemas/MiniAssetHolding'
                    type: array
                  current-round:
                    description: Round at which the results were computed.
                    type: integer
                  next-token:
                    description: Used for pagination, when making another request provide this token with the next parameter.
                    type: string
                required:
                  - balances
                  - current-round
                type: object
          description: (empty)
        '400':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
        '500':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
      tags:
        - Algorand - Indexer
  /v2/assets/{asset-id}/transactions:
    get:
      description: Lookup transactions for an asset. Transactions are returned oldest to newest.
      operationId: lookupAssetTransactions
      parameters:
        - description: Maximum number of results to return. There could be additional pages even if the limit is not reached.
          in: query
          name: limit
          schema:
            type: integer
        - description: The next page of results. Use the next token provided by the previous results.
          in: query
          name: next
          schema:
            type: string
        - description: Specifies a prefix which must be contained in the note field.
          in: query
          name: note-prefix
          schema:
            type: string
            x-algorand-format: base64
          x-algorand-format: base64
        - in: query
          name: tx-type
          schema:
            enum:
              - pay
              - keyreg
              - acfg
              - axfer
              - afrz
              - appl
              - stpf
            type: string
        - description: |-
            SigType filters just results using the specified type of signature:
            * sig - Standard
            * msig - MultiSig
            * lsig - LogicSig
          in: query
          name: sig-type
          schema:
            enum:
              - sig
              - msig
              - lsig
            type: string
        - description: Lookup the specific transaction by ID.
          in: query
          name: txid
          schema:
            type: string
        - description: Include results for the specified round.
          in: query
          name: round
          schema:
            type: integer
        - description: Include results at or after the specified min-round.
          in: query
          name: min-round
          schema:
            type: integer
        - description: Include results at or before the specified max-round.
          in: query
          name: max-round
          schema:
            type: integer
        - description: Include results before the given time. Must be an RFC 3339 formatted string.
          in: query
          name: before-time
          schema:
            format: date-time
            type: string
            x-algorand-format: RFC3339 String
          x-algorand-format: RFC3339 String
        - description: Include results after the given time. Must be an RFC 3339 formatted string.
          in: query
          name: after-time
          schema:
            format: date-time
            type: string
            x-algorand-format: RFC3339 String
          x-algorand-format: RFC3339 String
        - description: Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
          in: query
          name: currency-greater-than
          schema:
            type: integer
        - description: Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
          in: query
          name: currency-less-than
          schema:
            type: integer
        - description: Only include transactions with this address in one of the transaction fields.
          in: query
          name: address
          schema:
            type: string
            x-algorand-format: Address
          x-algorand-format: Address
        - description: Combine with the address parameter to define what type of address to search for.
          in: query
          name: address-role
          schema:
            enum:
              - sender
              - receiver
              - freeze-target
            type: string
        - description: Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true.
          in: query
          name: exclude-close-to
          schema:
            type: boolean
        - in: path
          name: asset-id
          required: true
          schema:
            type: integer
        - description: Include results which include the rekey-to field.
          in: query
          name: rekey-to
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  current-round:
                    description: Round at which the results were computed.
                    type: integer
                  next-token:
                    description: Used for pagination, when making another request provide this token with the next parameter.
                    type: string
                  transactions:
                    items:
                      $ref: '#/components/schemas/Transaction'
                    type: array
                required:
                  - current-round
                  - transactions
                type: object
          description: (empty)
        '400':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
        '500':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
      tags:
        - Algorand - Indexer
  /v2/blocks/{round-number}:
    get:
      description: Lookup block.
      operationId: lookupBlock
      parameters:
        - description: Round number
          in: path
          name: round-number
          required: true
          schema:
            type: integer
        - description: Header only flag. When this is set to true, returned block does not contain the transactions
          in: query
          name: header-only
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Block'
          description: (empty)
        '404':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
        '500':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
      tags:
        - Algorand - Indexer
  /v2/transactions/{txid}:
    get:
      description: Lookup a single transaction.
      operationId: lookupTransaction
      parameters:
        - in: path
          name: txid
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  current-round:
                    description: Round at which the results were computed.
                    type: integer
                  transaction:
                    $ref: '#/components/schemas/Transaction'
                required:
                  - current-round
                  - transaction
                type: object
          description: (empty)
        '400':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
        '404':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
        '500':
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties: {}
                    type: object
                  message:
                    type: string
                required:
                  - message
                type: object
          description: Response for errors
      tags:
        - Algorand - Indexer
  /versions:
    get:
      description: Retrieves the supported API versions, binary build versions, and genesis information.
      operationId: GetVersion
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
          description: VersionsResponse is the response to 'GET /versions'
      tags:
        - Algorand - Algod
servers:
  - url: https://go.getblock.io/e7d426c76ea54015ade7e7283113440f
  - url: https://testnet-api.algonode.cloud/
  - url: https://betanet-api.algonode.cloud/
