components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      description: t-645a26e22d0761001c811c84-645a26e32d0761001c811c8a
security:
  - ApiKeyAuth: []

info:
  title: Data API
  version: "1.0.0"
openapi: 3.0.3
paths:
  /v3/data/collections:
    get:
      tags:
        - NFT API
      summary: getCollectionsData
      operationId: getCollectionsData
      parameters:
        - name: chain
          in: query
          required: true
          schema:
            type: string
            enum:
              - ethereum
              - ethereum-sepolia
              - celo
              - celo-testnet
              - bsc
              - bsc-testnet
              - polygon
              - polygon-mumbai
              - eon
              - chiliz
          description: The blockchain to query
        - name: collectionAddresses
          in: query
          required: true
          schema:
            type: string
          description: Address of the collection
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  # Define the properties of your response here
                  exampleProperty:
                    type: string
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  
  /v3/data/metadata:
    get:
      tags:
        - NFT API
      summary: getTokenMetadata
      operationId: getTokenMetadata
      parameters:
        - name: chain
          in: query
          required: true
          schema:
            type: string
          description: The blockchain to query (e.g., ethereum)
        - name: tokenAddress
          in: query
          required: true
          schema:
            type: string
          description: Address of the token
        - name: tokenIds
          in: query
          required: false
          schema:
            type: string
          description: Comma-separated list of token IDs
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  # Define the properties of your response here
                  exampleProperty:
                    type: string
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  
  /v3/data/owners:
    get:
      tags:
        - NFT API
        - Token API
      summary: getAllOwnersofToken
      operationId: getOwners
      parameters:
        - name: chain
          in: query
          required: true
          schema:
            type: string
          description: Blockchain to query (e.g., ethereum)
        - name: tokenAddress
          in: query
          required: true
          schema:
            type: string
          description: Token address
      responses:
        '200':
          description: Successful response
          # Define response schema

  /v3/data/owners/address:
    get:
      tags:
        - NFT API
      summary: getOwnershipByAddress
      operationId: getOwnershipByAddress
      parameters:
        - name: chain
          in: query
          required: true
          schema:
            type: string
            enum:
              - ethereum
              - ethereum-sepolia
              - celo
              - celo-testnet
              - bsc
              - bsc-testnet
              - polygon
              - polygon-mumbai
              - eon
              - chiliz
          description: Blockchain to query
        - name: address
          in: query
          required: true
          schema:
            type: string
          description: Address to query
        - name: tokenAddress
          in: query
          required: true
          schema:
            type: string
          description: Token address
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  # Define the properties of your response here
                  exampleProperty:
                    type: string
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  
servers:
  - url: https://api.tatum.io/
